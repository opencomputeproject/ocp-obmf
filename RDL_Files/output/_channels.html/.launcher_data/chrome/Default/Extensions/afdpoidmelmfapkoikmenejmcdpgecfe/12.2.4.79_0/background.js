// ReSharper disable All
this["AternityExtension"] = this["AternityExtension"] || {}; this["AternityExtension"]["background"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 56);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function isSerializablePrimitive(value) {
    if (typeof value === "number" && isNaN(value)) {
        return false;
    }
    return typeof value === "string" ||
        typeof value === "boolean" ||
        typeof value === "number";
}
exports.isSerializablePrimitive = isSerializablePrimitive;
var HTTP_STATUS_CODE_REGEX = /HTTP\/\d\.\d (\d+)/;
/**
 * First try to get the status code from the details (available since Chrome 43),
 * if it isn't there try to parse it from the status line
 * According to RFC 2616:
 * Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF
 *
 * @return Status code or null if the statusLine is invalid.
 */
function getStatusCode(details) {
    if (details.statusCode != null) {
        return details.statusCode;
    }
    var statusCode = details.statusLine.match(HTTP_STATUS_CODE_REGEX);
    return statusCode !== null ? parseInt(statusCode[1], 10) : null;
}
exports.getStatusCode = getStatusCode;
function startsWith(str, prefix) {
    return str.substring(0, prefix.length) === prefix;
}
exports.startsWith = startsWith;
function endsWith(str, suffix) {
    return str.substring(str.length - suffix.length) === suffix;
}
exports.endsWith = endsWith;
function capitalize(s) {
    return s[0].toUpperCase() + s.slice(1);
}
exports.capitalize = capitalize;
function getSubstring(str, start, end) {
    // Find start
    var startIndex = str.indexOf(start);
    if (startIndex === -1) {
        return "";
    }
    // Skip the hash if present
    var endIndex = str.indexOf(end);
    // Skip empty query
    if (endIndex === startIndex + 1) {
        return "";
    }
    // Return substring
    return str.substring(startIndex + 1, endIndex !== -1 ? endIndex : str.length);
}
/**
 * Parse url and extract query string.
 * The query string is parsed into key to value array.
 * Multiple values are supported.
 */
function getUrlParams(url) {
    var ret = {};
    // Get query string
    var query = getSubstring(url, "?", "#");
    if (query.length === 0) {
        return ret;
    }
    // Parse the query string
    var params = query.split("&");
    // No values, use the query as parameter name.
    if (params.length === 0) {
        pushOrInit(ret, query, "");
        return ret;
    }
    for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {
        var param = params_1[_i];
        var nameIndex = param.indexOf("=");
        if (nameIndex === -1) {
            pushOrInit(ret, param, "");
            continue;
        }
        try {
            var name_1 = decodeURI(param.substring(0, nameIndex));
            var value = decodeURI(param.substring(nameIndex + 1));
            pushOrInit(ret, name_1, value);
        }
        catch (e) {
            // Do not add invalid URI params
        }
    }
    return ret;
}
exports.getUrlParams = getUrlParams;
/**
 * Pushes value to array property if key exists or create a new array.
 */
function pushOrInit(keyValueObj, key, value) {
    if (key in keyValueObj) {
        keyValueObj[key].push(value);
    }
    else {
        keyValueObj[key] = [value];
    }
}
exports.pushOrInit = pushOrInit;
/**
 * Concatenate value to array property if key exists or assign the values.
 */
function concatOrInit(
// tslint:disable-next-line readonly-array
keyValueObj, key, values) {
    if (key in keyValueObj) {
        var currentValues = keyValueObj[key];
        if (currentValues != null) {
            keyValueObj[key] = currentValues.concat(values);
            return;
        }
    }
    keyValueObj[key] = values;
}
exports.concatOrInit = concatOrInit;
/**
 * Set properties values from source into destination.
 * Makes a shallow copy of the first level properties.
 */
function populate(source, destination) {
    for (var prop in source) {
        if (source.hasOwnProperty(prop)) {
            destination[prop] = source[prop];
        }
    }
}
exports.populate = populate;
function deepClone(obj) {
    if (obj == null) {
        return obj;
    }
    if (typeof obj === "number" || typeof obj === "boolean" || typeof obj === "string") {
        return obj;
    }
    // Array is a special case
    if (Array.isArray(obj)) {
        var retArray = new Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            retArray[i] = deepClone(obj[i]);
        }
        return retArray;
    }
    // Make sure the returned object has the same prototype as the original
    var proto = Object.getPrototypeOf != null
        ? Object.getPrototypeOf(obj)
        : obj.__proto__;
    if (!proto) {
        // This line would probably only be reached by very old browsers
        proto = obj.constructor.prototype;
    }
    var ret = Object.create(proto);
    for (var prop in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, prop))
            continue;
        // tslint:disable-next-line no-any no-unsafe-any
        ret[prop] = deepClone(obj[prop]);
    }
    return ret;
}
exports.deepClone = deepClone;
// tslint:enable readonly-array no-any no-unsafe-any
/**
 * Rewrites the object using given callback.
 * @param obj Object to rewrite
 * @param f Transformation function
 * @param leaveUndefined When set to 'true' it allows to set undefined value
 *  in case it is returned by the callback.
 * When set to 'false' the property is removed from the object
 *  when undefined value is returned from the callback.
 */
function rewriteObject(
// tslint:disable-next-line no-any
obj, 
// tslint:disable-next-line no-any
convert, leaveUndefined) {
    if (leaveUndefined === void 0) { leaveUndefined = true; }
    if (obj == null) {
        return;
    }
    for (var property in obj) {
        if (!obj.hasOwnProperty(property))
            continue;
        var value = convert(property, obj[property]);
        // Special case for undefined
        if (typeof value === "undefined" && !leaveUndefined) {
            delete obj[property];
        }
        else {
            obj[property] = value;
        }
    }
}
exports.rewriteObject = rewriteObject;
/**
 * Allows access to nested properties of an object using a string key path.
 *
 * @param obj The object to access.
 * @param path The nested path to access separated by dots (e.g. "attributes.id"). If path is ""
 * then the original object is returned.
 */
// tslint:disable-next-line no-any
function pick(obj, path) {
    if (path === "") {
        return obj;
    }
    var ret = obj;
    var keys = path.split(".");
    for (var i = 0; i < keys.length && typeof ret !== "undefined"; i++) {
        /* tslint:disable-next-line no-unsafe-any */
        ret = ret[keys[i]];
    }
    return ret;
}
exports.pick = pick;
function makeFunctionCall(f, args) {
    // tslint:enable max-line-length no-any
    var argsString = [];
    if (args != null) {
        for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
            var v = args_1[_i];
            // tslint:disable-next-line no-unsafe-any
            argsString.push((typeof v === "string") ? "\"" + v + "\"" : v);
        }
    }
    return "(" + f + ")(" + argsString + ")";
}
exports.makeFunctionCall = makeFunctionCall;
function isValueOneOf(value, values) {
    return values.indexOf(value) !== -1;
}
exports.isValueOneOf = isValueOneOf;
var SUPPORTS_FREEZE = Object.freeze != null && Object.isFrozen != null && Object.getOwnPropertyNames != null;
function deepFreeze(obj) {
    if (!SUPPORTS_FREEZE) {
        return obj;
    }
    // As of Jan 2018 gmail overwrites Object.Freeze, causing it to add an object property.
    // The workaround is to grab the property list before freezing the object.
    var originalProps = Object.getOwnPropertyNames(obj);
    var objIsFunction = typeof obj === "function";
    Object.freeze(obj);
    for (var _i = 0, originalProps_1 = originalProps; _i < originalProps_1.length; _i++) {
        var prop = originalProps_1[_i];
        // Do not freeze special function properties.
        // PhantomJS doesn't like it.
        if (objIsFunction && (prop === "caller" || prop === "callee" || prop === "arguments")) {
            continue;
        }
        // Skip null
        // tslint:disable-next-line no-any
        if (obj[prop] === null) {
            continue;
        }
        // Recursively freeze only objects or functions
        // tslint:disable-next-line no-any
        if (typeof obj[prop] !== "object" && typeof obj[prop] !== "function") {
            continue;
        }
        // Do not freeze if frozen
        // tslint:disable-next-line no-any
        if (Object.isFrozen(obj[prop])) {
            continue;
        }
        // Freeze recursively.
        // tslint:disable-next-line no-any no-unsafe-any
        deepFreeze(obj[prop]);
    }
    return obj;
}
exports.deepFreeze = deepFreeze;
function asReadonly(obj) {
    return obj;
}
exports.asReadonly = asReadonly;
// tslint:enable readonly-array
/**
 * Add value to array only if it doesn't present in array.
 */
// tslint:disable-next-line readonly-array
function addUnique(array, value) {
    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
        var elem = array_1[_i];
        if (elem === value) {
            return;
        }
    }
    array.push(value);
}
exports.addUnique = addUnique;
var REGEX_ESCAPED_CHARACTERS = /([\\^$.*+?()[\]{}|])/g; // Take the special characters
var REGEX_UNESCAPED_CHARACTERS = /\\([\\^$.*+?()[\]{}|])/g; // Take the special that are preceeded by \
function escapeRegExp(unescaped) {
    // Implementation copied from lodash implementation for escapeRegExp
    return (unescaped !== "" && REGEX_ESCAPED_CHARACTERS.test(unescaped))
        ? unescaped.replace(REGEX_ESCAPED_CHARACTERS, "\\$&")
        : unescaped;
}
exports.escapeRegExp = escapeRegExp;
/**
 * Unescape string into regex format
 */
function unescapeRegExp(escaped) {
    // Implementation ammended from lodash implementation for escapeRegExp
    return (escaped !== "" && REGEX_UNESCAPED_CHARACTERS.test(escaped))
        ? escaped.replace(REGEX_UNESCAPED_CHARACTERS, "$1")
        : escaped;
}
exports.unescapeRegExp = unescapeRegExp;
var DATA_REGEX = /^data\:/;
/**
 * @returns {string} Whether given URL is data URL.
 */
function isDataUrl(url) {
    return DATA_REGEX.test(url);
}
exports.isDataUrl = isDataUrl;
exports.isInternetExplorer = 
// Conditional compilation: https://docs.microsoft.com/en-us/scripting/javascript/reference/at-cc-on-statement-javascript
/*@cc_on!@*/ false; // || document.documentMode != null;
/**
 * Set property value if it doesn't present in the object.
 */
function setIfNotExist(data, property, value) {
    // tslint:disable-next-line no-unsafe-any
    if (!data.hasOwnProperty(property)) {
        data[property] = value;
    }
}
exports.setIfNotExist = setIfNotExist;
/**
 * Set property value using valueFactory if it doesn't present in the object.
 */
function setIfNotExistFactory(data, property, valueFactory) {
    // tslint:disable-next-line no-unsafe-any
    if (!data.hasOwnProperty(property)) {
        data[property] = valueFactory();
    }
}
exports.setIfNotExistFactory = setIfNotExistFactory;
/**
 * Search element in array.
 * @see Array.prototype.find
 */
function find(arr, condition) {
    for (var i = 0, n = arr.length; i < n; ++i) {
        var element = arr[i];
        if (condition(element)) {
            return element;
        }
    }
    return undefined;
}
exports.find = find;
/**
 * Converts a binary string to a Uint8Array
 * @param str input binary string to convert to a Uint8Array
 */
function binstring2Buf(str) {
    var buf = new Uint8Array(str.length);
    for (var i = 0, len = buf.length; i < len; i++) {
        buf[i] = str.charCodeAt(i);
    }
    return buf;
}
exports.binstring2Buf = binstring2Buf;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Function which does nothing.
 */
function emptyFunction() { }
// Global console object and window.console don't exist in IE by default.
// But it magically appears when opening developer tools.
function hasConsole() {
    return console != null;
}
// Bind is supported only in modern browsers
var SUPPORTS_BIND = Function.prototype.bind != null;
/**
 * Wrap log function with message and optional parameters.
 *
 * @param f console object function
 */
function wrapConsoleLogFunction(f) {
    if (!hasConsole()) {
        return emptyFunction;
    }
    // Resharper 2017.3 bug
    // ReSharper disable ImplicitAnyError
    // Validate function exist.
    // If function doesn't exist try using 'console.log'.
    if (console[f] == null) {
        if (f !== "log") {
            return wrapConsoleLogFunction("log");
        }
        else {
            return emptyFunction;
        }
    }
    // Use bind if possible
    try {
        if (SUPPORTS_BIND &&
            console[f] != null &&
            console[f].bind != null) {
            return console[f].bind(console);
        }
    }
    catch (e) {
    }
    return console[f];
    // ReSharper restore ImplicitAnyError
}
var emptyLogger = {
    debug: emptyFunction,
    log: emptyFunction,
    info: emptyFunction,
    warn: emptyFunction,
    error: emptyFunction,
    trace: emptyFunction
};
function wrapConsole() {
    return {
        debug: wrapConsoleLogFunction("debug"),
        log: wrapConsoleLogFunction("log"),
        info: wrapConsoleLogFunction("info"),
        warn: wrapConsoleLogFunction("warn"),
        error: wrapConsoleLogFunction("error"),
        trace: wrapConsoleLogFunction("trace")
    };
}
/**
 * @return Logger which logs if window.console present or logger stub which does nothing.
 */
function createConsoleLogger() {
    return hasConsole() ? wrapConsole() : emptyLogger;
}
// Current logger implementation
var currentLogger = emptyLogger;
function getLogger() {
    return currentLogger;
}
exports.getLogger = getLogger;
/**
 * Enable logs.
 */
function enableLogs() {
    currentLogger = createConsoleLogger();
}
exports.enableLogs = enableLogs;
/**
 * Disable logs.
 */
function disableLogs() {
    currentLogger = emptyLogger;
}
exports.disableLogs = disableLogs;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var browserInfo_1 = __webpack_require__(8);
var consts_1 = __webpack_require__(4);
var timeProvider_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(0);
/**
 * Message from background to content script.
 */
var ContentMessageType;
(function (ContentMessageType) {
    ContentMessageType["RECONFIGURE"] = "reconfigure";
    ContentMessageType["UNINITIALIZE"] = "uninitialize";
})(ContentMessageType = exports.ContentMessageType || (exports.ContentMessageType = {}));
/**
 * Chrome only messages between background and content scripts
 */
var ChromeContentMessageType;
(function (ChromeContentMessageType) {
    ChromeContentMessageType["DOCUMENT_TITLE_UPDATE"] = "documentTitleUpdate";
    ChromeContentMessageType["DOCUMENT_TITLE_REQUEST"] = "documentTitleRequest";
    ChromeContentMessageType["DOCUMENT_TITLE_RESPONSE"] = "documentTitleResponse";
})(ChromeContentMessageType = exports.ChromeContentMessageType || (exports.ChromeContentMessageType = {}));
var MessageType;
(function (MessageType) {
    MessageType["EVENT"] = "event";
    MessageType["LOG"] = "log";
    MessageType["WPM_PAGELOAD_EVENT"] = "wpmpageloadevent";
    MessageType["WPM_ERROR_EVENT"] = "wpmerrorevent";
    MessageType["CONTENT_SCRIPT_LOAD"] = "contentscriptload";
    MessageType["GET_STATUS_CODE"] = "getstatuscode";
    MessageType["WAC_FROM_INJECTED"] = "MessageFromInjected";
    MessageType["WAC_TO_IE"] = "wac2ie";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
/**
 *
 * Messages from content script to background
 */
exports.CONTENT_MESSAGES = [
    MessageType.WAC_FROM_INJECTED,
    MessageType.CONTENT_SCRIPT_LOAD,
    MessageType.GET_STATUS_CODE
];
var HTTP_CHROME_WEBPAGE_PAGELOAD = "http:chrome:WebPage.PageLoad";
var WPM_PAGE_LOAD_UX = "wpm:chrome:Page.Load";
exports.WPM_PAGE_ERROR_UX = "wpm:chrome:Page.Error";
exports.NV_CHROME_WORKTIME_VIOLATION = "nv:chrome:WorkTime.Violation";
var OutgoingBaseNativeMessage = /** @class */ (function () {
    function OutgoingBaseNativeMessage(messageType, timeStamp) {
        this.messageType = messageType;
        this.timeStamp = timeStamp;
        this.browserName = browserInfo_1.browserInfo.name;
        this.browserVersion = browserInfo_1.browserInfo.version;
        this.extensionVersion = consts_1.EXTENSION_VERSION.getValue();
    }
    return OutgoingBaseNativeMessage;
}());
exports.OutgoingBaseNativeMessage = OutgoingBaseNativeMessage;
var OutgoingPageNativeMessage = /** @class */ (function (_super) {
    __extends(OutgoingPageNativeMessage, _super);
    function OutgoingPageNativeMessage(messageType, timeStamp) {
        var _this = _super.call(this, messageType, timeStamp) || this;
        _this.messageType = messageType;
        _this.timeStamp = timeStamp;
        return _this;
    }
    return OutgoingPageNativeMessage;
}(OutgoingBaseNativeMessage));
exports.OutgoingPageNativeMessage = OutgoingPageNativeMessage;
var OutgoingEventMessage = /** @class */ (function (_super) {
    __extends(OutgoingEventMessage, _super);
    function OutgoingEventMessage(eventType, timeStamp) {
        var _this = _super.call(this, MessageType.EVENT, timeStamp) || this;
        _this.messageData = {
            EventType: eventType,
            // tslint:disable-next-line no-any
            Data: [({})]
        };
        return _this;
    }
    return OutgoingEventMessage;
}(OutgoingPageNativeMessage));
exports.OutgoingEventMessage = OutgoingEventMessage;
var WacOutgoingNativeMessage = /** @class */ (function (_super) {
    __extends(WacOutgoingNativeMessage, _super);
    function WacOutgoingNativeMessage(wacMessageData) {
        var _this = _super.call(this, MessageType.WAC_TO_IE, timeProvider_1.timeProvider.now()) || this;
        _this.wacMessageData = wacMessageData;
        return _this;
    }
    return WacOutgoingNativeMessage;
}(OutgoingPageNativeMessage));
exports.WacOutgoingNativeMessage = WacOutgoingNativeMessage;
var OutgoingHttpChromeWebPageLoadEventMessage = /** @class */ (function (_super) {
    __extends(OutgoingHttpChromeWebPageLoadEventMessage, _super);
    function OutgoingHttpChromeWebPageLoadEventMessage(timeStamp) {
        return _super.call(this, HTTP_CHROME_WEBPAGE_PAGELOAD, timeStamp) || this;
    }
    return OutgoingHttpChromeWebPageLoadEventMessage;
}(OutgoingEventMessage));
exports.OutgoingHttpChromeWebPageLoadEventMessage = OutgoingHttpChromeWebPageLoadEventMessage;
var OutgoingWpmPageLoadUXMessage = /** @class */ (function (_super) {
    __extends(OutgoingWpmPageLoadUXMessage, _super);
    function OutgoingWpmPageLoadUXMessage() {
        return _super.call(this, WPM_PAGE_LOAD_UX, performance.timing.loadEventEnd) || this;
    }
    return OutgoingWpmPageLoadUXMessage;
}(OutgoingEventMessage));
exports.OutgoingWpmPageLoadUXMessage = OutgoingWpmPageLoadUXMessage;
var OutgoingWpmPageErrorUXMessage = /** @class */ (function (_super) {
    __extends(OutgoingWpmPageErrorUXMessage, _super);
    function OutgoingWpmPageErrorUXMessage() {
        return _super.call(this, exports.WPM_PAGE_ERROR_UX, performance.timing.loadEventEnd) || this;
    }
    return OutgoingWpmPageErrorUXMessage;
}(OutgoingEventMessage));
exports.OutgoingWpmPageErrorUXMessage = OutgoingWpmPageErrorUXMessage;
// ReSharper disable once InconsistentNaming
var OutgoingNVWorkTimeViolationUXMessage = /** @class */ (function (_super) {
    __extends(OutgoingNVWorkTimeViolationUXMessage, _super);
    function OutgoingNVWorkTimeViolationUXMessage(nvViolationData) {
        var _this = _super.call(this, exports.NV_CHROME_WORKTIME_VIOLATION, timeProvider_1.timeProvider.now()) || this;
        _this.messageData.Data = [utils_1.deepClone(nvViolationData)];
        return _this;
    }
    return OutgoingNVWorkTimeViolationUXMessage;
}(OutgoingEventMessage));
exports.OutgoingNVWorkTimeViolationUXMessage = OutgoingNVWorkTimeViolationUXMessage;
var OutgoingWpmPageLoadEventMessage = /** @class */ (function (_super) {
    __extends(OutgoingWpmPageLoadEventMessage, _super);
    function OutgoingWpmPageLoadEventMessage(title, url, responseTime, activityResponse, tcpConnectTime, redirectTime, dnsTime, requestTime, processingTime, loadTime, totalNetworkResponseTime, totalNetworkServerTime, clientTime, serverURL, userId, pageId, aixId) {
        var _this = _super.call(this, MessageType.WPM_PAGELOAD_EVENT, performance.timing.loadEventEnd) || this;
        _this.title = title;
        _this.url = url;
        _this.responseTime = responseTime;
        _this.activityResponse = activityResponse;
        _this.tcpConnectTime = tcpConnectTime;
        _this.redirectTime = redirectTime;
        _this.dnsTime = dnsTime;
        _this.requestTime = requestTime;
        _this.processingTime = processingTime;
        _this.loadTime = loadTime;
        _this.totalNetworkResponseTime = totalNetworkResponseTime;
        _this.totalNetworkServerTime = totalNetworkServerTime;
        _this.clientTime = clientTime;
        _this.serverURL = serverURL;
        _this.userId = userId;
        _this.pageId = pageId;
        _this.aixId = aixId;
        return _this;
    }
    return OutgoingWpmPageLoadEventMessage;
}(OutgoingPageNativeMessage));
exports.OutgoingWpmPageLoadEventMessage = OutgoingWpmPageLoadEventMessage;
var OutgoingWpmErrorEventMessage = /** @class */ (function (_super) {
    __extends(OutgoingWpmErrorEventMessage, _super);
    function OutgoingWpmErrorEventMessage(url, targetFrameName, statusCode) {
        var _this = _super.call(this, MessageType.WPM_ERROR_EVENT, performance.timing.loadEventEnd) || this;
        _this.url = url;
        _this.targetFrameName = targetFrameName;
        _this.statusCode = statusCode;
        return _this;
    }
    return OutgoingWpmErrorEventMessage;
}(OutgoingPageNativeMessage));
exports.OutgoingWpmErrorEventMessage = OutgoingWpmErrorEventMessage;
var OutgoingLogMessage = /** @class */ (function (_super) {
    __extends(OutgoingLogMessage, _super);
    function OutgoingLogMessage(level, message) {
        var _this = _super.call(this, MessageType.LOG, timeProvider_1.timeProvider.now()) || this;
        _this.level = level;
        _this.message = consts_1.EXTENSION_VERSION.getValue() + ": " + message;
        return _this;
    }
    return OutgoingLogMessage;
}(OutgoingPageNativeMessage));
exports.OutgoingLogMessage = OutgoingLogMessage;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * window.performance.now provider.
 */
var performanceNowProvider = {
    now: function () {
        return window.performance.now();
    }
};
/**
 * Returns current time using the best available option.
 */
exports.timeProvider = {
    // Some IE modes don't have Date.now.
    now: Date.now != null
        ? function () { return Date.now(); }
        : function () { return new Date().getTime(); }
};
// Validate window.performance exists and working correctly (IE bug !)
/*
    const HAS_PERFORMANCE_NOW =
    window.performance != null &&
    window.performance.now != null &&
    window.performance.now() !== Infinity;
    */
/**
 * Time provider for relative calculations.
 * It doesn't necessarily returns the current time.
 *
 * performance.now is too slow in IE, using inaccurate timeProvider now.
 */
exports.relativeTimeProvider = exports.timeProvider;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// import { chrome } from "./globalChrome";
var lazy_1 = __webpack_require__(5);
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["TRACE"] = 6] = "TRACE";
    LogLevel[LogLevel["DEBUG"] = 5] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 4] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 2] = "ERROR";
    LogLevel[LogLevel["FATAL"] = 1] = "FATAL";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
exports.EXTENSION_VERSION = new lazy_1.Lazy(function () { return chrome.runtime.getManifest().version; });
/**
 * Key name delimiter for nested structure.
 */
exports.KEY_DELIMITER = ".";
/**
 * Report everything.
 */
exports.REPORT_EVERYTHING = "Everything";
/**
 * WebRequest event regex.
 */
exports.WEBREQUEST_EVENT_RE = /^http\:chrome\:WebRequest/;
exports.WEBREQUEST_EVENT_NAMESPACE = "http:chrome:WebRequest";
/**
 * Required properties in WebRequest events.
 */
exports.WEBREQUEST_REQUIRED_PROPERTIES = [
    ["documentUrl", "type"],
    ["documentCommittedUrl", "type"]
];


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Lazy = /** @class */ (function () {
    function Lazy(generatorOrValue) {
        if (typeof generatorOrValue === "function") {
            this.generator = generatorOrValue;
            this.hasValue = false;
        }
        else {
            this.value = generatorOrValue;
            this.hasValue = true;
        }
    }
    Lazy.prototype.getValue = function () {
        // tslint:disable no-non-null-assertion
        if (!this.hasValue) {
            this.value = this.generator();
            this.hasValue = true;
        }
        return this.value;
        // tslint:enable no-non-null-assertion
    };
    Lazy.from = function (value) {
        return new Lazy(value);
    };
    /**
     * Extract value either from immediate or from lazy.
     */
    Lazy.extract = function (canbeLazy) {
        if (canbeLazy instanceof Lazy) {
            // ReSharper disable once TsResolvedFromInaccessibleModule
            return canbeLazy.getValue();
        }
        else {
            return canbeLazy;
        }
    };
    return Lazy;
}());
exports.Lazy = Lazy;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var Utils = __webpack_require__(0);
var lazy_1 = __webpack_require__(5);
// .NET style for case insensitive option
var DOTNET_CASE_INSENSITIVE = /^(\^?)\(\?i\)(\^?)(.*)/;
function isValidRegex(pattern) {
    try {
        // ReSharper disable once WrongExpressionStatement
        /* tslint:disable-next-line no-unused-expression*/
        new RegExp(pattern);
        return true;
    }
    catch (e) {
        log_1.getLogger().error("Invalid regular expression", pattern);
        return false;
    }
}
/**
 * A special class for optimized regular expression matching.
 */
var RegExpMatcher = /** @class */ (function () {
    function RegExpMatcher() {
    }
    /**
     * @param pattern Pattern to match.
     * @param isExact Whether to use exact match or equality
     * @param caseInsensitive Force case insensitive pattern. Valid only if isExact is false.
     */
    RegExpMatcher.prototype.addMatcher = function (pattern, isExact, caseInsensitive) {
        if (caseInsensitive === void 0) { caseInsensitive = false; }
        if (isExact) {
            this.multiPattern =
                RegExpMatcher.addMultiPattern(this.multiPattern, "^" + Utils.escapeRegExp(pattern) + "$");
        }
        else {
            // Handle case insensitive option
            var groups = pattern.match(DOTNET_CASE_INSENSITIVE);
            var icase = groups != null ? (groups[1] !== "" ? groups[1] : groups[2]) : "";
            var matchPattern = groups != null ? (icase + groups[3]) : pattern;
            // Test regular expression
            if (!isValidRegex(matchPattern))
                return;
            if (groups != null || caseInsensitive) {
                // Store previous value
                var previMultiPattern = this.imultiPattern;
                // Get new pattern
                var newIMultiPattern = RegExpMatcher.addMultiPattern(this.imultiPattern, matchPattern);
                // If regex is not valid, restore previous value
                if (isValidRegex(newIMultiPattern)) {
                    // Update pattern and clear cache
                    this.imultiPattern = newIMultiPattern;
                    this.iregexMatcher = undefined;
                }
                else {
                    this.imultiPattern = previMultiPattern;
                    return;
                }
            }
            else {
                // Store previous value
                var prevMultiPattern = this.multiPattern;
                // Get new pattern
                var newMultiPattern = RegExpMatcher.addMultiPattern(this.multiPattern, matchPattern);
                // If regex is not valid, restore previous value
                if (isValidRegex(newMultiPattern)) {
                    // Update pattern and clear cache
                    this.multiPattern = newMultiPattern;
                    this.regexMatcher = undefined;
                }
                else {
                    this.multiPattern = prevMultiPattern;
                    return;
                }
            }
        }
    };
    RegExpMatcher.addMultiPattern = function (multiPattern, matchPattern) {
        return (multiPattern == null ? "" : multiPattern + "|") + matchPattern;
    };
    RegExpMatcher.prototype.isMatch = function (input) {
        if (this.multiPattern != null) {
            if (this.regexMatcher == null) {
                this.regexMatcher = new RegExp(this.multiPattern);
            }
            if (this.regexMatcher.test(lazy_1.Lazy.extract(input))) {
                return true;
            }
        }
        if (this.imultiPattern != null) {
            if (this.iregexMatcher == null) {
                this.iregexMatcher = new RegExp(this.imultiPattern, "i");
            }
            if (this.iregexMatcher.test(lazy_1.Lazy.extract(input))) {
                return true;
            }
        }
        return false;
    };
    RegExpMatcher.prototype.hasMatcher = function () {
        return this.multiPattern != null || this.imultiPattern != null;
    };
    return RegExpMatcher;
}());
exports.RegExpMatcher = RegExpMatcher;


/***/ }),
/* 7 */,
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable max-line-length
/* Chrome UserAgent:
 * "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36"
 * "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36"
 * "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
 * Chrome AppVersion:
 * "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
 */
var CHROME_VERSION = /Chrome\/(([0-9]+)\.([0-9]+)\.([.0-9]+))/;
/* Safari UserAgent:
 * "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/601.6.17 (KHTML, like Gecko) Version/9.1.1 Safari/601.6.17"
 * "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.1 Safari/605.1.15"
 * Safari AppVersion:
 * "5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.1 Safari/605.1.15"
 */
var SAFARI_VERSION = /Version\/(([0-9])\.([0-9])\.([.0-9]+))\s+Safari/;
/*
 * Firefox UserAgent:
 * "Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0"
 * "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0"
 */
var FIREFOX_VERSION = /Firefox\/(([0-9]+)\.([0-9]+))/;
/*
 * Chromium Edge UserAgent (the new Chromium Edge introduced on 01/2020):
 * "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 Edg/80.0.361.50"
 * Chromium Edge AppVersion:
 * "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 Edg/80.0.361.50"
 */
var CHROMIUM_EDGE_VERSION = /Edg\/(([0-9]+)\.([0-9]+)\.([.0-9]+))/;
function createBrowserInfo(name, matches) {
    var major = matches[2];
    var minor = matches[3];
    return {
        name: name,
        version: matches[1],
        major: parseInt(major, 10),
        minor: parseInt(minor, 10)
    };
}
/**
 * @return Browser name and version extracted from appVersion string or userAgent string, obtained from the window.navigator object.
 */
function getBrowserInfo(appVersion, userAgent) {
    // The Chromium Edge regex should be executed before the Chrome and the Safari regex, as its User Agent and App Version strings contain the later.
    // const matches = CHROMIUM_EDGE_VERSION.exec(appVersion);
    /*
    if (matches != null) {
        return createBrowserInfo(BrowserType.Edge, matches);
    }
    */
    var matches = CHROME_VERSION.exec(appVersion);
    if (matches != null) {
        return createBrowserInfo("Chrome" /* Chrome */, matches);
    }
    /*
    matches = SAFARI_VERSION.exec(appVersion);
    if (matches != null) {
        return createBrowserInfo(BrowserType.Safari, matches);
    }

    matches = FIREFOX_VERSION.exec(userAgent);
    if (matches != null) {
        return createBrowserInfo(BrowserType.Firefox, matches);
    }
    */
    return createBrowserInfo("N/A" /* NA */, ["", "0.0.0.0", "0", "0"]);
}
exports.getBrowserInfo = getBrowserInfo;
exports.browserInfo = getBrowserInfo(navigator.appVersion, navigator.userAgent);


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(0);
/**
 * Configuration version format.
 */
exports.CONFIGURATION_VERSION = 2;
exports.VISIBILITY_MONITORING_INTERVAL_MS = 300;
exports.ELEMENTS_DISCOVERY_INTERVAL_MS = 1500;
exports.DEFAULT_BACKOFF_GRACE_PERIOD = 1000;
exports.MAX_PROPERTY_LENGTH = 256;
var WORKTIME_THRESHOLD_ALLOW_ALL = [{ WorkTime: 1000000, TimeFrame: 1000000 }];
function makeMutableDefaultConfiguration(wpmUrl, eventConfig, allowEvents) {
    var ret = {
        ConfigurationVersion: exports.CONFIGURATION_VERSION,
        MaxPropertyLength: exports.MAX_PROPERTY_LENGTH,
        WPMDocumentUrlFiltersList: [wpmUrl],
        WPMCommittedUrlFiltersList: [wpmUrl],
        FullWpmFiltersList: [wpmUrl],
        EventConfig: eventConfig,
        WorkTimeThresholds: allowEvents ? WORKTIME_THRESHOLD_ALLOW_ALL : [],
        ConsolidatedEventConfig: {},
        VisibilityMonitoringIntervalMs: exports.VISIBILITY_MONITORING_INTERVAL_MS,
        ElementsDiscoveryIntervalMs: exports.ELEMENTS_DISCOVERY_INTERVAL_MS,
        BackoffGracePeriodMs: exports.DEFAULT_BACKOFF_GRACE_PERIOD
    };
    return ret;
}
function makeReadonlyDefaultConfiguration(wpmUrl, eventConfig, allowEvents) {
    var configurationData = makeMutableDefaultConfiguration(wpmUrl, eventConfig, allowEvents);
    // Workaround ReSharper 2017.3 bug, specify generic parameter explicitly
    return utils_1.deepFreeze(configurationData);
}
/** Default configuration, do nothing. */
exports.EMPTY_CONFIGURATION = makeReadonlyDefaultConfiguration("", {}, false);
/* Starting configuration to be overwritten by configuration from the Agent. */
exports.STARTING_CONFIGURATION = makeMutableDefaultConfiguration("", {}, false);
/** Report everything configuration */
exports.REPORT_EVERYTHING_CONFIGURATION = makeReadonlyDefaultConfiguration(".*", {
    Everything: [],
    "ui:chrome:Tab.Everything": [],
    "ui:chrome:Document.Everything": []
}, true);
/** Report wpm configuration */
exports.REPORT_WPM_CONFIGURATION = makeReadonlyDefaultConfiguration(".*", {
    "http:chrome:WebPage.Everything": [],
    "wpm:chrome:Page.Everything": []
}, true);


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// ReSharper disable InconsistentNaming
exports.NV_CHROME_WORKTIME_VIOLATION = "nv:chrome:WorkTime.Violation";
exports.HTML_DESIGNER_EVENT_NAMESPACE = "ui:chrome:Document";
exports.HTML_ONAPP_EVENT_NAMESPACE = "ui:chrome:OnApp:Document";
exports.DOM_EVENT_NAMESPACE = "ui:chrome:OnApp:Dom";
exports.VISIBLE_EVENT_NAME = getFullDomEventName("Visible");
exports.INVISIBLE_EVENT_NAME = getFullDomEventName("Invisible");
// ReSharper restore InconsistentNaming
function getFullDomEventName(name) {
    return exports.DOM_EVENT_NAMESPACE + "." + name;
}


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FrameType;
(function (FrameType) {
    FrameType["DOCUMENT"] = "document";
    FrameType["FRAME"] = "frame";
})(FrameType = exports.FrameType || (exports.FrameType = {}));
/**
 * @param {number} frameId Frame id to retrieve type from.
 * @returns {string} Return property 'type' value.
 */
function getFrameType(frameId) {
    return frameId === 0 ? FrameType.DOCUMENT : FrameType.FRAME;
}
exports.getFrameType = getFrameType;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Utils = __webpack_require__(0);
var ConfigurationUtils = __webpack_require__(18);
var ConfigurationData_1 = __webpack_require__(9);
var RegExpMatcher_1 = __webpack_require__(6);
var EventConfiguration_1 = __webpack_require__(19);
// tslint:disable-next-line no-require-imports
var SimpleLRU = __webpack_require__(21);
var MAX_CONFIGURATION_CACHE_SIZE = 100;
/**
 * Encapsulates Data.Configuration
 */
var Configuration = /** @class */ (function () {
    function Configuration(configurationData) {
        this.specializedEventConfiguration = {};
        this.configurationDataCache = new SimpleLRU(MAX_CONFIGURATION_CACHE_SIZE);
        this.configurationData = ConfigurationData_1.STARTING_CONFIGURATION;
        Utils.populate(configurationData, this.configurationData);
        this.maxPropertyLength =
            configurationData.MaxPropertyLength != null
                ? configurationData.MaxPropertyLength
                : ConfigurationData_1.VISIBILITY_MONITORING_INTERVAL_MS;
        this.visibilityMonitoringIntervalMs =
            configurationData.VisibilityMonitoringIntervalMs != null
                ? configurationData.VisibilityMonitoringIntervalMs
                : ConfigurationData_1.VISIBILITY_MONITORING_INTERVAL_MS;
        this.elementsDiscoveryIntervalMs =
            configurationData.ElementsDiscoveryIntervalMs != null
                ? configurationData.ElementsDiscoveryIntervalMs
                : ConfigurationData_1.ELEMENTS_DISCOVERY_INTERVAL_MS;
        // WPM
        this.wpmDocumentUrlFilters = new RegExpMatcher_1.RegExpMatcher();
        if (configurationData.WPMDocumentUrlFiltersList != null) {
            for (var _i = 0, _a = configurationData.WPMDocumentUrlFiltersList; _i < _a.length; _i++) {
                var wpmUrlFilter = _a[_i];
                this.wpmDocumentUrlFilters.addMatcher(wpmUrlFilter, false);
            }
        }
        this.wpmCommittedUrlFilters = new RegExpMatcher_1.RegExpMatcher();
        if (configurationData.WPMCommittedUrlFiltersList != null) {
            for (var _b = 0, _c = configurationData.WPMCommittedUrlFiltersList; _b < _c.length; _b++) {
                var wpmUrlFilter = _c[_b];
                this.wpmCommittedUrlFilters.addMatcher(wpmUrlFilter, false);
            }
        }
        // Full page
        this.httpWebPageLoadUrlFilters = new RegExpMatcher_1.RegExpMatcher();
        if (configurationData.FullWpmFiltersList != null) {
            for (var _d = 0, _e = configurationData.FullWpmFiltersList; _d < _e.length; _d++) {
                var fullWpmUrlFilter = _e[_d];
                this.httpWebPageLoadUrlFilters.addMatcher(fullWpmUrlFilter, false, true);
            }
        }
        var eventConfig = configurationData.EventConfig != null ? configurationData.EventConfig : {};
        this.globalEventConfiguration = new EventConfiguration_1.EventConfiguration(eventConfig);
        var consolidatedEventConfig = configurationData.ConsolidatedEventConfig;
        if (consolidatedEventConfig != null) {
            for (var consolidationProperty in consolidatedEventConfig) {
                if (!consolidatedEventConfig.hasOwnProperty(consolidationProperty))
                    continue;
                var consolidatedConfiguration = consolidatedEventConfig[consolidationProperty];
                for (var matcher in consolidatedConfiguration) {
                    if (!consolidatedConfiguration.hasOwnProperty(matcher))
                        continue;
                    if (this.specializedEventConfiguration[consolidationProperty] == null) {
                        this.specializedEventConfiguration[consolidationProperty] = {};
                    }
                    this.specializedEventConfiguration[consolidationProperty][matcher] =
                        new EventConfiguration_1.EventConfiguration(consolidatedConfiguration[matcher]);
                }
            }
        }
    }
    Configuration.prototype.getEventsForPage = function (consolidationKeys) {
        var key = JSON.stringify(consolidationKeys);
        var configurationDataFromCache = this.configurationDataCache.get(key);
        if (configurationDataFromCache != null) {
            return configurationDataFromCache;
        }
        var configuration = ConfigurationUtils.getEventsForPage(this.configurationData, consolidationKeys);
        this.configurationDataCache.set(key, configuration);
        return configuration;
    };
    Configuration.prototype.hasEventFilter = function (eventName) {
        // Check both in event filters and in everything prefixes.
        return this.globalEventConfiguration.eventFilters.hasFilter(eventName) || this.isMatchEverything(eventName);
    };
    /**
     * Check if the given monitoringEvent is monitored.
     *
     * For given event http:chrome:WebRequest.Start those even categories return true:
     * http:chrome:WebRequest
     * http:chrome
     * http
     *
     * @return true if monitored, false otherwise.
     */
    Configuration.prototype.isMonitoring = function (monitoringEvent) {
        // Check event filter
        if (this.hasEventFilter(monitoringEvent)) {
            return true;
        }
        // Check everything event filters by prefix
        for (var _i = 0, _a = this.globalEventConfiguration.everythingPrefixEvents; _i < _a.length; _i++) {
            var everythingEventFilter = _a[_i];
            if (Utils.startsWith(everythingEventFilter, monitoringEvent))
                return true;
        }
        // Check event filters by prefix
        for (var _b = 0, _c = this.globalEventConfiguration.eventFilters.getEventNames(); _b < _c.length; _b++) {
            var eventFilter = _c[_b];
            if (Utils.startsWith(eventFilter, monitoringEvent))
                return true;
        }
        return false;
    };
    Configuration.prototype.isMatchEvent = function (eventName, propertyName, input) {
        // Check both in event filters and in everything prefixes.
        return this.isMatchEverything(eventName) ||
            this.globalEventConfiguration.eventFilters.isMatch(eventName, propertyName, input);
    };
    Configuration.prototype.isMatchEverything = function (eventName) {
        return this.globalEventConfiguration.everythingPrefixEvents.some(function (p) { return Utils.startsWith(eventName, p); });
    };
    Configuration.prototype.isMatchWebRequestEvent = function (propertyName, input) {
        // First check whether event is in everything filters
        if (this.globalEventConfiguration.webRequestEverything) {
            return true;
        }
        return this.globalEventConfiguration.webRequestFilters.isMatch(propertyName, input);
    };
    Configuration.prototype.hasWebRequestFilter = function (propertyName) {
        // First check whether event is in everything filters
        if (this.globalEventConfiguration.webRequestEverything) {
            return true;
        }
        return this.globalEventConfiguration.webRequestFilters.hasFilter(propertyName);
    };
    Configuration.prototype.isMatchForWpmUrls = function (documentUrl, documentCommittedUrl) {
        if (this.wpmDocumentUrlFilters.isMatch(documentUrl)) {
            return true;
        }
        if (documentCommittedUrl != null) {
            return this.wpmCommittedUrlFilters.isMatch(documentCommittedUrl);
        }
        return false;
    };
    Configuration.prototype.isMatchForHttpWebPageLoadUrl = function (url) {
        return this.httpWebPageLoadUrlFilters.isMatch(url);
    };
    Configuration.prototype.hasWpmFilter = function () {
        return this.wpmDocumentUrlFilters.hasMatcher() ||
            this.wpmCommittedUrlFilters.hasMatcher() ||
            this.httpWebPageLoadUrlFilters.hasMatcher();
    };
    Configuration.prototype.getPropertyMatchers = function (eventName, propertyName) {
        var result = [];
        var eventConfig = this.configurationData.EventConfig[eventName];
        if (typeof eventConfig === "undefined") {
            return result;
        }
        for (var _i = 0, eventConfig_1 = eventConfig; _i < eventConfig_1.length; _i++) {
            var conditions = eventConfig_1[_i];
            var propertyConditions = conditions.Conditions[propertyName];
            if (typeof propertyConditions === "undefined") {
                continue;
            }
            for (var _a = 0, propertyConditions_1 = propertyConditions; _a < propertyConditions_1.length; _a++) {
                var propertyMatch = propertyConditions_1[_a];
                result.push(propertyMatch);
            }
        }
        return result;
    };
    Configuration.prototype.hasPropertyMatchers = function (eventName, propertyName) {
        var eventConfig = this.configurationData.EventConfig[eventName];
        if (typeof eventConfig === "undefined") {
            return false;
        }
        for (var _i = 0, eventConfig_2 = eventConfig; _i < eventConfig_2.length; _i++) {
            var conditions = eventConfig_2[_i];
            var propertyConditions = conditions.Conditions[propertyName];
            if (typeof propertyConditions === "undefined") {
                continue;
            }
            return true;
        }
        return false;
    };
    return Configuration;
}());
exports.Configuration = Configuration;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RegExpMatcher_1 = __webpack_require__(6);
/**
 * Match property name by regular expression.
 * Use with caution !
 */
var REGEX_PROPERTY = /(.*)~$/;
var ConfigurationFilters = /** @class */ (function () {
    function ConfigurationFilters() {
        this.propertyFilters = {};
        // tslint:disable-next-line readonly-array
        this.regexPopertyFilters = [];
    }
    // tslint:disable-next-line readonly-array
    ConfigurationFilters.prototype.getExactPropertyNames = function () {
        return Object.getOwnPropertyNames(this.propertyFilters);
    };
    ConfigurationFilters.prototype.hasRegexPropertyNames = function () {
        return this.regexPopertyFilters.length > 0;
    };
    ConfigurationFilters.prototype.addFilter = function (propertyName, pattern, isExact) {
        // Special case for regular expression property name
        var regexProperty = propertyName.match(REGEX_PROPERTY);
        if (regexProperty != null) {
            this.addRegexPropertyFilter(regexProperty[1], pattern, isExact);
        }
        else {
            if (this.propertyFilters[propertyName] == null) {
                this.propertyFilters[propertyName] = new RegExpMatcher_1.RegExpMatcher();
            }
            this.propertyFilters[propertyName].addMatcher(pattern, isExact);
        }
    };
    ConfigurationFilters.prototype.addRegexPropertyFilter = function (property, pattern, isExact) {
        try {
            var re = new RegExp(property);
            var filter = void 0;
            // Add to existing
            for (var _i = 0, _a = this.regexPopertyFilters; _i < _a.length; _i++) {
                var propertyFilter = _a[_i];
                if (propertyFilter.property.toString() === re.toString()) {
                    filter = propertyFilter;
                }
            }
            // Or create a new one
            // ReSharper disable once ConditionIsAlwaysConst
            // ReSharper disable once HeuristicallyUnreachableCode
            if (filter == null) {
                filter = {
                    property: re,
                    matcher: new RegExpMatcher_1.RegExpMatcher()
                };
                this.regexPopertyFilters.push(filter);
            }
            // Add matcher
            // ReSharper disable once TsResolvedFromInaccessibleModule
            filter.matcher.addMatcher(pattern, isExact);
        }
        catch (e) {
            // Regular expression is not valid, skip it.
            return;
        }
    };
    ConfigurationFilters.prototype.hasFilter = function (propertyName) {
        return propertyName in this.propertyFilters ||
            this.regexPopertyFilters.some(function (f) { return f.property.test(propertyName); });
    };
    /**
     * First checking exact ones and then the regular expression.
     */
    ConfigurationFilters.prototype.isMatch = function (propertyName, input) {
        var filters = this.propertyFilters[propertyName];
        if (filters != null && filters.isMatch(input)) {
            return true;
        }
        else {
            return this.regexPopertyFilters.some(function (f) { return f.property.test(propertyName) && f.matcher.isMatch(input); });
        }
    };
    return ConfigurationFilters;
}());
exports.ConfigurationFilters = ConfigurationFilters;


/***/ }),
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Utils = __webpack_require__(0);
var RegExpMatcher_1 = __webpack_require__(6);
/**
 * Gets the configuration for given consolidation keys
 *
 * @param configurationData Configuration data to extract configuration from.
 * @param consolidationKeys Mapping from consolidation key to value.
 */
function getEventsForPage(configurationData, consolidationKeys) {
    var result = {};
    for (var property in consolidationKeys) {
        if (!consolidationKeys.hasOwnProperty(property))
            continue;
        var forProperty = configurationData.ConsolidatedEventConfig[property];
        if (forProperty == null)
            continue; // Then we don't have a consolidation by this property
        for (var filter in forProperty) {
            if (!forProperty.hasOwnProperty(filter))
                continue;
            var matcher = new RegExpMatcher_1.RegExpMatcher();
            matcher.addMatcher(filter, false);
            if (matcher.isMatch(consolidationKeys[property])) {
                var events = forProperty[filter];
                extendEventConfig(result, events);
            }
        }
    }
    var ret = {
        ConfigurationVersion: configurationData.ConfigurationVersion,
        MaxPropertyLength: configurationData.MaxPropertyLength,
        VisibilityMonitoringIntervalMs: configurationData.VisibilityMonitoringIntervalMs,
        BackoffGracePeriodMs: configurationData.BackoffGracePeriodMs,
        ElementsDiscoveryIntervalMs: configurationData.ElementsDiscoveryIntervalMs,
        WorkTimeThresholds: configurationData.WorkTimeThresholds,
        EventConfig: result,
        ConsolidatedEventConfig: {},
        // DE22560: WPM is part of the configuration intended for the background only -
        // it's of no use to the content script
        WPMDocumentUrlFiltersList: [],
        WPMCommittedUrlFiltersList: [],
        FullWpmFiltersList: []
    };
    return ret;
}
exports.getEventsForPage = getEventsForPage;
function extendEventConfig(target, source) {
    for (var eventName in source) {
        if (!source.hasOwnProperty(eventName))
            continue;
        var conditions = source[eventName];
        if (conditions.length !== 1) {
            throw new Error("Multiple ConditionObjects not supported");
        }
        if (!target.hasOwnProperty(eventName)) {
            // ReSharper 2017.3 bug workaround
            // tslint:disable-next-line no-unnecessary-type-assertion
            target[eventName] = Utils.deepClone(conditions);
        }
        else {
            if (target[eventName].length !== 1) {
                throw new Error("Multiple ConditionObjects not supported");
            }
            var targetConditions = target[eventName][0].Conditions;
            var sourceConditions = conditions[0].Conditions;
            extendConditions(targetConditions, sourceConditions);
        }
    }
}
function comparePropertyMatch(a, b) {
    return a.MatchType === b.MatchType && a.Value === b.Value;
}
function extendConditions(target, source) {
    for (var propertyName in source) {
        if (!source.hasOwnProperty(propertyName))
            continue;
        if (!target.hasOwnProperty(propertyName)) {
            // ReSharper 2017.3 bug workaround
            // tslint:disable-next-line no-unnecessary-type-assertion
            target[propertyName] = Utils.deepClone(source[propertyName]);
        }
        else {
            var targetMatchers = target[propertyName];
            var sourceMatcher = source[propertyName];
            var _loop_1 = function (matcher) {
                if (targetMatchers.some(function (m) { return comparePropertyMatch(m, matcher); })) {
                    return "continue";
                }
                targetMatchers.push(matcher);
            };
            for (var _i = 0, sourceMatcher_1 = sourceMatcher; _i < sourceMatcher_1.length; _i++) {
                var matcher = sourceMatcher_1[_i];
                _loop_1(matcher);
            }
        }
    }
}


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Utils = __webpack_require__(0);
var Consts = __webpack_require__(4);
var ConfigurationFilters_1 = __webpack_require__(13);
var EventFilters_1 = __webpack_require__(20);
/*
 * Report everything for this event.
 */
var EVERYTHING_EVENT_SUFFIX = new RegExp("(.*)" + Consts.REPORT_EVERYTHING + "$");
/*
 * The properties which must be send to the agent with any event
 */
var MANDATORY_PROPERTIES = ["tabId"];
var EventConfiguration = /** @class */ (function () {
    // tslint:disable-next-line readonly-array
    function EventConfiguration(eventToLevels) {
        this.webRequestEverything = false;
        this.eventFilters = new EventFilters_1.EventFilters();
        this.everythingPrefixEvents = [];
        this.webRequestEverything = false;
        this.webRequestFilters = new ConfigurationFilters_1.ConfigurationFilters();
        for (var eventName in eventToLevels) {
            if (!eventToLevels.hasOwnProperty(eventName))
                continue;
            if (this.tryAddEverything(eventName)) {
                continue;
            }
            var levels = eventToLevels[eventName];
            // Currently we support only one level
            for (var i = 0; i < Math.min(levels.length, 1); i++) {
                var conditions = levels[i].Conditions;
                for (var propertyName in conditions) {
                    if (!conditions.hasOwnProperty(propertyName))
                        continue;
                    var matchers = conditions[propertyName];
                    for (var _i = 0, matchers_1 = matchers; _i < matchers_1.length; _i++) {
                        var matcher = matchers_1[_i];
                        var value = matcher.Value;
                        var isExact = matcher.MatchType === "exact";
                        this.addFilter(eventName, propertyName, value, isExact);
                    }
                }
            }
        }
        this.verifyMandatoryProperties();
    }
    EventConfiguration.prototype.tryAddEverything = function (eventName) {
        // Test for everything case
        var everythingMatch = eventName.match(EVERYTHING_EVENT_SUFFIX);
        if (everythingMatch != null) {
            var eventPrefix = everythingMatch[1];
            // Add if hasn't been added before
            if (this.everythingPrefixEvents.indexOf(eventPrefix) === -1) {
                this.everythingPrefixEvents.push(eventPrefix);
            }
            // Special WebRequest everything case
            this.webRequestEverything =
                this.webRequestEverything ||
                    Utils.startsWith(Consts.WEBREQUEST_EVENT_NAMESPACE, eventPrefix) ||
                    eventPrefix.length === 0 ||
                    Consts.WEBREQUEST_EVENT_RE.test(eventPrefix);
            return true;
        }
        else {
            return false;
        }
    };
    EventConfiguration.prototype.addFilter = function (eventName, propertyName, value, isExact) {
        var configPropertyName = EventConfiguration.normalizeProperty(propertyName);
        // Special webRequest properties.
        if (Consts.WEBREQUEST_EVENT_RE.test(eventName)) {
            this.webRequestFilters.addFilter(configPropertyName, value, isExact);
        }
        this.eventFilters.addFilter(eventName, configPropertyName, value, isExact);
    };
    /**
     * Convert header property to be lower case.
     * Leave other properties as-is.
     */
    EventConfiguration.normalizeProperty = function (propertyName) {
        var groups = propertyName.match(EventConfiguration.HEADER_PROPERTY);
        if (groups != null) {
            return groups[1] + groups[2].toLowerCase();
        }
        else {
            return propertyName;
        }
    };
    // Make sure that all the mandatory property names are in the configuration
    EventConfiguration.prototype.verifyMandatoryProperties = function () {
        for (var _i = 0, MANDATORY_PROPERTIES_1 = MANDATORY_PROPERTIES; _i < MANDATORY_PROPERTIES_1.length; _i++) {
            var propertyName = MANDATORY_PROPERTIES_1[_i];
            for (var _a = 0, _b = this.eventFilters.getEventNames(); _a < _b.length; _a++) {
                var event_1 = _b[_a];
                this.addFilter(event_1, propertyName, ".*", false);
            }
        }
    };
    EventConfiguration.HEADER_PROPERTY = /^(requestHeader|responseHeader)(.*)/;
    return EventConfiguration;
}());
exports.EventConfiguration = EventConfiguration;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ConfigurationFilters_1 = __webpack_require__(13);
var EventFilters = /** @class */ (function () {
    function EventFilters() {
        this.eventFilters = {};
    }
    // tslint:disable-next-line readonly-array
    EventFilters.prototype.getEventNames = function () {
        return Object.getOwnPropertyNames(this.eventFilters);
    };
    EventFilters.prototype.getEventFilters = function (eventName) {
        return this.eventFilters[eventName];
    };
    EventFilters.prototype.addFilter = function (eventName, propertyName, pattern, isExact) {
        if (this.eventFilters[eventName] == null) {
            this.eventFilters[eventName] = new ConfigurationFilters_1.ConfigurationFilters();
        }
        this.eventFilters[eventName].addFilter(propertyName, pattern, isExact);
    };
    EventFilters.prototype.hasFilter = function (eventName) {
        return eventName in this.eventFilters;
    };
    EventFilters.prototype.isMatch = function (eventName, propertyName, input) {
        var filters = this.eventFilters[eventName];
        return filters != null && filters.isMatch(propertyName, input);
    };
    return EventFilters;
}());
exports.EventFilters = EventFilters;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;;(function () {
  'use strict';

  /**
   * export SimpleLRU for CommonJS, AMD
   */
  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return SimpleLRU;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}

  SimpleLRU.version = '0.0.3';

  /**
   * Simple mixin utility
   * @api private
   */
  function extend(obj1, obj2) {
    for (var key in obj2) obj1[key] = obj2[key];
  }

  var nativeCreate = Object.create;

  /**
   * Object data store
   * this is a `Object.create` fallback in order to support IE8
   * @api private
   */
  var Data = (function () {
    var Data, proto;

    if (typeof nativeCreate === 'function') {
      Data = function () {
        this.data = nativeCreate(null);
      };

      proto = {
        get: function (key) {
          return this.data[key];
        },
        has: function (key) {
          return !! this.data[key];
        }
      };

    } else {
      Data = function () {
        this.data = {};
      };

      proto = {
        get: function (key) {
          if (this.has(key)) return this.data[key];
        },
        has: function (key) {
          return Object.prototype.hasOwnProperty.call(this.data, key);
        }
      };
    }

    extend(proto, {
      set: function (key, val) {
        this.data[key] = val;
      },
      del: function (key) {
        var val = this.get(key);
        if (typeof val !== 'undefined') {
          delete this.data[key];
          return val;
        }
      }
    });

    extend(Data.prototype, proto);

    return Data;
  })();

  /**
   * Cache entry instance
   *
   * @param {String}
   * @param {any}
   * @param {Number}
   * @api private
   */
  function Entry(key, val, index) {
    this.key = key;
    this.val = val;
    this.index = index;
  }

  /**
   * SimpleLRU constructor
   * It holds following private properties. See `#reset()`
   *
   *   _byKey    {Data}    map by key
   *   _byOrder  {Object}  map by recently used order
   *   _head     {Number}  index of next entry
   *   _tail     {Number}  index of least recently used cache item
   *   _len      {Number}  total number of cache items
   *
   * `_tail` is an index of the least recently used cache item.
   * `_head` is an index of the most recently used cache item *plus* one.
   *
   * @param {Number} max length of cache item
   */
  function SimpleLRU(max) {
    if (typeof max !== 'number') throw new TypeError('max is requried');
    this.max(max);
    this.reset();
  }

  extend(SimpleLRU.prototype, {

    /**
     * Set cache by key
     * @param {String} unique string key
     * @param {String|Object|Number} any value
     */
    set: function (key, val) {
      var entry = this._byKey.get(key);

      // reuse entry if the key exists
      if (entry) {
        this._touch(entry);
        entry.val = val;
        return;
      }

      entry = new Entry(key, val, this._head++);
      this._byKey.set(key, entry);
      this._byOrder[entry.index] = entry;
      this._len++;
      this._trim();
    },

    /**
     * delete cache by key
     *
     * @param {String}
     * @return {String|Object|Number} cached value
     */
    del: function (key) {
      var entry = this._byKey.del(key);
      if (!entry) return;

      delete this._byOrder[entry.index];
      this._len--;

      if (this._len === 0) {
        this._head = this._tail = 0;
      } else {
        // update most index if it was most lecently used entry
        if (entry.index === this._head - 1) this._pop();
        // update least index if it was least lecently used entry
        if (entry.index === this._tail) this._shift();
      }

      return entry.val;
    },

    /**
     * get cache by key
     *
     * @param {String}
     * @return {any} cache if it exists
     */
    get: function (key) {
      var entry = this._byKey.get(key);
      if (entry) {
        this._touch(entry);
        return entry.val;
      }
    },

    /**
     * get a cache by key without touching index
     * @return {any}
     */
    peek: function (key) {
      var entry = this._byKey.get(key);
      if (entry) return entry.val;
    },

    /**
     * see if key is exists or not
     * @return {Boolean}
     */
    has: function (key) {
      return this._byKey.has(key);
    },

    /**
     * total number of cache
     * @return {Number}
     */
    length: function () {
      return this._len;
    },

    /**
     * clear all stored cache
     */
    reset: function () {
      this._byKey = new Data();
      this._byOrder = nativeCreate ? nativeCreate(null) : {};
      this._head = 0;
      this._tail = 0;
      this._len = 0;
    },

    /**
     * Getter|Setter function of "max" option
     * @param {Number} if setter
     */
    max: function (max) {
      if (typeof max !== 'number') return this._max;
      if (max < 1) throw new TypeError('max should be a positive number');
      var shrink = (this._max || 0) > max;
      this._max = max;
      if (shrink) this._trim();
    },

    /**
     * return array of keys in least recently used order
     * @return {Array}
     */
    keys: function () {
      var count = 0
        , tail = this._tail
        , head = this._head
        , keys = new Array(this._len);

      for (var i = tail; i < head; i++) {
        var entry = this._byOrder[i];
        if (entry) keys[count++] = entry.key;
      }

      return keys;
    },

    /**
     * update least recently used index of an entry to "_head"
     *
     * @param {Entry}
     * @api private
     */
    _touch: function (entry) {
      // update most number to key
      if (entry.index !== this._head - 1) {
        var isTail = entry.index === this._tail;
        delete this._byOrder[entry.index];
        entry.index = this._head++;
        this._byOrder[entry.index] = entry;
        if (isTail) this._shift();
      }
    },

    /**
     * trim entries
     * @api private
     */
    _trim: function () {
      var max = this._max;
      while (max < this._len) {
        var tailEntry = this._byOrder[this._tail];
        this.del(tailEntry.key);
      }
    },

    /**
     * update tail index
     * @return {Entry|undefined}
     * @api private
     */
    _shift: function () {
      var tail = this._tail
        , head = this._head;
      for (var i = tail; i < head; i++) {
        var entry = this._byOrder[i];
        if (entry) {
          this._tail = i;
          return entry;
        }
      }
    },

    /**
     * update head index
     * @return {Entry|undefined}
     * @api private
     */
    _pop: function () {
      var tail = this._tail
        , head = this._head;
      for (var i = head - 1; i >= tail; i--) {
        var headEntry = this._byOrder[i];
        if (headEntry) {
          this._head = i + 1;
          return headEntry;
        }
      }
    }
  });

})();

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
// import { BackgroundPageInformation } from "../common/PageInformation";
var MessagingModel_1 = __webpack_require__(2);
var timeProvider_1 = __webpack_require__(3);
exports.DOWNLOADS_EVENT_NAMESPACE = "ui:chrome:Downloads";
var DownloadItem = /** @class */ (function () {
    function DownloadItem(item) {
        Object.assign(this, item);
        this.totalTimeMillis = 0;
        this.interactionTimeMillis = 0;
        this.transferTimeMillis = 0;
        this.lastResumeTime = new Date(item.startTime).getTime();
        this.bytesReceived = 0;
    }
    DownloadItem.getDownloadInterruptReason = function (reason) {
        switch (reason) {
            case "FILE_FAILED":
            case "FILE_ACCESS_DENIED":
            case "FILE_NO_SPACE":
            case "FILE_NAME_TOO_LONG":
            case "FILE_TOO_LARGE":
            case "FILE_VIRUS_INFECTED":
            case "FILE_TRANSIENT_ERROR":
            case "FILE_BLOCKED":
            case "FILE_SECURITY_CHECK_FAILED":
            case "FILE_TOO_SHORT":
            case "FILE_HASH_MISMATCH":
            case "FILE_SAME_AS_SOURCE":
            case "NETWORK_FAILED":
            case "NETWORK_TIMEOUT":
            case "NETWORK_DISCONNECTED":
            case "NETWORK_SERVER_DOWN":
            case "NETWORK_INVALID_REQUEST":
            case "SERVER_FAILED":
            case "SERVER_NO_RANGE":
            case "SERVER_BAD_CONTENT":
            case "SERVER_UNAUTHORIZED":
            case "SERVER_CERT_PROBLEM":
            case "SERVER_FORBIDDEN":
            case "SERVER_UNREACHABLE":
            case "SERVER_CONTENT_LENGTH_MISMATCH":
            case "SERVER_CROSS_ORIGIN_REDIRECT":
            case "USER_CANCELED":
            case "USER_SHUTDOWN":
            case "CRASH":
                return reason;
            default:
                return "CRASH";
        }
    };
    return DownloadItem;
}());
// The sent message does *not* include tab/frame info. So it extends BaseNativeMessage,
// not PageNativeMessage.
var OutgoingDownloadMessage = /** @class */ (function (_super) {
    __extends(OutgoingDownloadMessage, _super);
    function OutgoingDownloadMessage(eventType, timeStamp) {
        var _this = _super.call(this, MessagingModel_1.MessageType.EVENT, timeStamp) || this;
        _this.messageData = {
            EventType: eventType,
            // tslint:disable-next-line no-any
            Data: [({})]
        };
        return _this;
    }
    return OutgoingDownloadMessage;
}(MessagingModel_1.OutgoingBaseNativeMessage));
exports.OutgoingDownloadMessage = OutgoingDownloadMessage;
var DownloadsMonitoring = /** @class */ (function () {
    function DownloadsMonitoring() {
        var _this = this;
        this.onDownloadCreated = function (item) {
            if (_this.manager == null || !_this.manager.active || _this.communication == null) {
                return;
            }
            if (item.state !== "in_progress") {
                // When opening the 'downloads' page for the first time in a session,
                // already-downloaded items fire onCreated with state 'complete', or 'interrupted' etc.
                return;
            }
            // Add the item's id to the activeDownloadIDs array, only if it does not exist
            var index = _this.activeDownloadIDs.indexOf(item.id);
            if (index === -1) {
                _this.activeDownloadIDs.push(item.id);
            }
            // Start the polling only once
            if (_this.activeDownloadIDs.length === 1) {
                _this.startPolling();
            }
            _this.downloads[item.id] = new DownloadItem(item);
            _this.downloads[item.id].lastResumeTime = new Date(item.startTime).getTime();
            // Save the original final name, before the override
            _this.downloads[item.id].filename = item.url.split("/").pop();
        };
        this.onDownloadChanged = function (delta) {
            if (_this.manager == null || !_this.manager.active || _this.communication == null) {
                return;
            }
            // Verify the change is relevant
            if (delta.fileSize === undefined &&
                delta.totalBytes === undefined &&
                delta.filename === undefined &&
                delta.paused === undefined &&
                delta.endTime === undefined &&
                delta.error === undefined) {
                return;
            }
            var item = _this.downloads[delta.id];
            if (item === undefined) {
                log_1.getLogger().error("DownloadChanged without matching DownloadCreated: ", delta);
                return;
            }
            if (delta.fileSize !== undefined && delta.fileSize.current !== undefined) {
                item.fileSize = delta.fileSize.current;
            }
            if (delta.totalBytes !== undefined && delta.totalBytes.current !== undefined) {
                item.totalBytes = delta.totalBytes.current;
            }
            if (delta.filename !== undefined && delta.filename.current !== undefined) {
                // Filename is set - interaction has ended
                if (item.filename === "") { // In case filename was missing
                    item.filename = delta.filename.current;
                }
                // Track here when it's time to rethink this code: https://bugs.chromium.org/p/chromium/issues/detail?id=982232#c0
                item.interactionTimeMillis = timeProvider_1.timeProvider.now() - new Date(item.startTime).getTime();
            }
            // Handle pause/resume
            if (delta.paused !== undefined && delta.paused.current !== undefined) {
                if (delta.paused.current === false) {
                    // Just resumed
                    log_1.getLogger().debug("Download resumed: ", item);
                    item.lastResumeTime = timeProvider_1.timeProvider.now();
                }
                else {
                    log_1.getLogger().debug("Download paused: ", item);
                    item.transferTimeMillis += timeProvider_1.timeProvider.now() - item.lastResumeTime;
                }
            }
            // Handle completion
            if (delta.endTime !== undefined) {
                item.totalTimeMillis = timeProvider_1.timeProvider.now() - new Date(item.startTime).getTime();
                _this.handleCompletion(item);
            }
            // Handle cancellation/failure
            if (delta.error !== undefined ||
                (delta.state !== undefined && delta.state.current === "interrupted")) {
                _this.removeItemFromPolling(item.id);
                item.totalTimeMillis = timeProvider_1.timeProvider.now() - new Date(item.startTime).getTime();
                item.transferTimeMillis += timeProvider_1.timeProvider.now() - item.lastResumeTime;
                if (item.interactionTimeMillis === 0) {
                    // User just cancelled at the file dialog
                    item.interactionTimeMillis = item.totalTimeMillis;
                }
                if (delta.error !== undefined && delta.error.current !== undefined) {
                    item.error = DownloadItem.getDownloadInterruptReason(delta.error.current);
                }
                log_1.getLogger().info("Download failed message", item);
                var message = _this.createDataMessage("Failed", item);
                _this.communication.postNativeMessage(message);
                _this.removeItemFromDownloads(delta.id);
            }
        };
        this.downloads = {};
        this.activeDownloadIDs = [];
    }
    DownloadsMonitoring.prototype.initDownloadsMonitoring = function (manager, communication) {
        this.manager = manager;
        this.communication = communication;
        chrome.downloads.onChanged.addListener(this.onDownloadChanged);
        chrome.downloads.onCreated.addListener(this.onDownloadCreated);
    };
    DownloadsMonitoring.prototype.uninitDownloadsMonitoring = function () {
        chrome.downloads.onChanged.removeListener(this.onDownloadChanged);
        chrome.downloads.onCreated.removeListener(this.onDownloadCreated);
    };
    DownloadsMonitoring.prototype.makeEventName = function (event) {
        return exports.DOWNLOADS_EVENT_NAMESPACE + "." + event;
    };
    DownloadsMonitoring.prototype.createDataMessage = function (event, item) {
        var message = new OutgoingDownloadMessage(this.makeEventName(event), timeProvider_1.timeProvider.now());
        var messageData = message.messageData.Data[0];
        messageData.downloadUrl = item.url;
        messageData.referrerPageUrl = item.referrer;
        messageData.totalBytes = item.totalBytes;
        messageData.filename = item.filename;
        messageData.mime = item.mime;
        messageData.startTime = new Date(item.startTime).getTime();
        if (item.error !== undefined) {
            messageData.error = item.error;
        }
        messageData.totalTimeMillis = item.totalTimeMillis;
        messageData.transferTimeMillis = item.transferTimeMillis;
        messageData.interactionTimeMillis = item.interactionTimeMillis;
        messageData.waitTimeMillis = item.totalTimeMillis - item.interactionTimeMillis;
        messageData.bytesReceived = item.bytesReceived;
        return message;
    };
    DownloadsMonitoring.prototype.pollDownloads = function () {
        var _this = this;
        this.activeDownloadIDs.forEach(function (id) { return chrome.downloads.search({ id: id }, function (item) {
            // Make changes only if download is in progress (bytesReceived for failed / cancelled downloads are 0)
            if (item[0].bytesReceived > 0) {
                var downloadingItem = _this.downloads[id];
                downloadingItem.bytesReceived = item[0].bytesReceived;
                //  If item was completely downloaded - handle completion
                if (item[0].bytesReceived === downloadingItem.totalBytes) {
                    var now = timeProvider_1.timeProvider.now();
                    downloadingItem.transferTimeMillis += now - downloadingItem.lastResumeTime;
                    downloadingItem.lastResumeTime = now;
                    _this.removeItemFromPolling(item[0].id);
                }
            }
        }); });
    };
    DownloadsMonitoring.prototype.handleCompletion = function (item) {
        log_1.getLogger().info("Download complete message", item);
        if (this.communication == null) {
            return;
        }
        // Can happen when the file is too small and item.bytesReceived were not updated yet
        if (item.bytesReceived === 0) {
            item.bytesReceived = item.totalBytes;
            var now = timeProvider_1.timeProvider.now();
            item.transferTimeMillis += now - item.lastResumeTime;
            item.totalTimeMillis = now - new Date(item.startTime).getTime(); // update total time - to be more accurate
        }
        this.removeItemFromPolling(item.id);
        var message = this.createDataMessage("Completed", item);
        this.communication.postNativeMessage(message);
    };
    DownloadsMonitoring.prototype.removeItemFromDownloads = function (id) {
        var itemDownloaded = this.downloads[id];
        if (itemDownloaded !== undefined) {
            delete this.downloads[id];
        }
    };
    DownloadsMonitoring.prototype.startPolling = function () {
        this.pollingTimer = setInterval(this.pollDownloads.bind(this), 100);
        log_1.getLogger().info("Started downloads polling, interval ID: ", this.pollingTimer);
    };
    DownloadsMonitoring.prototype.removeItemFromPolling = function (downloadId) {
        var index = this.activeDownloadIDs.indexOf(downloadId);
        if (index !== -1) {
            this.activeDownloadIDs.splice(index, 1);
        }
        if (this.activeDownloadIDs.length === 0) {
            this.stopPolling();
        }
    };
    DownloadsMonitoring.prototype.stopPolling = function () {
        if (this.pollingTimer !== undefined) {
            clearInterval(this.pollingTimer);
            log_1.getLogger().info("Stopped downloads polling, interval ID: ", this.pollingTimer);
            this.pollingTimer = undefined;
        }
    };
    return DownloadsMonitoring;
}());
exports.DownloadsMonitoring = DownloadsMonitoring;


/***/ }),
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Order of the native message.
 */
var nativeMessageOrder = 0;
function getNativeMessageOrder() {
    // Limit order by max uint32
    if (nativeMessageOrder > 2 * 1024 * 1024 * 1024) {
        nativeMessageOrder = 0;
    }
    return nativeMessageOrder++;
}
exports.getNativeMessageOrder = getNativeMessageOrder;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable no-any */
var IncomingAction;
(function (IncomingAction) {
    IncomingAction["Configuration"] = "configuration";
    IncomingAction["Deactivate"] = "deactivate";
    IncomingAction["WacMessage"] = "wac";
})(IncomingAction = exports.IncomingAction || (exports.IncomingAction = {}));
/* tslint:disable no-any */
exports.INCOMING_VERSION = 1;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var MessagingModel_1 = __webpack_require__(2);
var Consts = __webpack_require__(4);
var Utils = __webpack_require__(0);
var MessageOrder_1 = __webpack_require__(30);
var WebRequestsState_1 = __webpack_require__(61);
var WebRequestEvent_1 = __webpack_require__(33);
var webRequest = chrome.webRequest;
function isMonitoredState(frameMonitoredState) {
    return frameMonitoredState.monitorWebRequest || frameMonitoredState.monitorWPM;
}
exports.WEB_REQUEST_EVENT_NAMESPACE = "http:chrome:WebRequest";
function makeEventName(event) {
    return exports.WEB_REQUEST_EVENT_NAMESPACE + "." + event;
}
var WebRequest = /** @class */ (function () {
    function WebRequest(tabsStates) {
        var _this = this;
        this.webRequestsStates = new WebRequestsState_1.WebRequestsStates();
        // #endregion
        // #region Handlers
        this.onBeforeRequest = function (details) {
            if (!_this.isMonitored(details, false)) {
                return undefined;
            }
            log_1.getLogger().debug("WebRequest.onBeforeRequest", details);
            // Get frame state
            var frameState = _this.tabsStates.getFrame(details);
            // In case we have the same tab id and frame id and the requestId is different,
            // and the type is "main_frame" or "sub_frame", we have a new navigation.
            if (frameState != null && frameState.requestId !== details.requestId) {
                // Frame state exists, only frame type means navigation.
                if (_this.isFrameType(details.type)) {
                    // Remove states
                    _this.tabsStates.removeFrame(details.tabId, details.frameId);
                    _this.webRequestsStates.remove(frameState.requestId);
                    frameState = _this.addFrame(details);
                    // Remove instant tabs
                    setTimeout(function () { return _this.tabsStates.validateTab(details.tabId); }, 60 * 1000);
                }
            }
            // Web request is initialized only for start navigation event.
            var requestState = _this.webRequestsStates.get(details.requestId);
            if (requestState == null) {
                requestState = _this.webRequestsStates.add(details.requestId, details.timeStamp);
            }
            // This check never positive since there is assignment before.
            if (frameState == null || requestState == null) {
                return undefined;
            }
            // Update frame's current url if it is frame request.
            if (_this.isFrameType(details.type)) {
                frameState.currentUrl = details.url;
            }
            else {
                // Update only if wasn't defined before
                if (typeof frameState.currentUrl === "undefined") {
                    frameState.currentUrl = details.url;
                }
            }
            // Filter event
            var monitoredState = _this.getMonitoredState(frameState, details);
            if (!isMonitoredState(monitoredState)) {
                return undefined;
            }
            // Mark down the time
            requestState.storeEventTime(WebRequestEvent_1.WebRequestEvent.BeforeRequest, details.timeStamp);
            // Create message
            var message = _this.createDataMessage("BeforeRequest", details, frameState);
            var eventData = message.messageData.Data[0];
            // Parse url parameters into formData
            var urlParams = Utils.getUrlParams(details.url);
            _this.populateFormData(urlParams, eventData);
            // Add requestBody
            if (details.requestBody != null) {
                if (details.requestBody.error != null) {
                    eventData.requestBodyType = "Error";
                    eventData.requestBodyError = details.requestBody.error;
                }
                else if (details.requestBody.formData != null) {
                    eventData.requestBodyType = "FormData";
                    requestState.totalOutgoingBytes += _this.populateFormData(details.requestBody.formData, eventData);
                }
                else if (details.requestBody.raw != null) {
                    eventData.requestBodyType = "Raw";
                    eventData.requestBodyRaw = [];
                    for (var _i = 0, _a = details.requestBody.raw; _i < _a.length; _i++) {
                        var uploadData = _a[_i];
                        if (uploadData.bytes != null) {
                            requestState.totalOutgoingBytes += uploadData.bytes.byteLength;
                            eventData.requestBodyRaw.push("Bytes");
                        }
                        else {
                            if (uploadData.file != null) {
                                requestState.totalOutgoingBytes += uploadData.file.length;
                                eventData.requestBodyRaw.push(uploadData.file);
                            }
                        }
                    }
                }
            }
            // Set beforeRequestEvent only in the first request.
            if (!requestState.setBeforeRequestEvent) {
                requestState.beforeRequestEvent = Utils.deepClone(message);
                requestState.startMesageOrder = MessageOrder_1.getNativeMessageOrder();
                requestState.setBeforeRequestEvent = true;
            }
            if (_this.communication != null && monitoredState.monitorWebRequest) {
                // Always post if AppInternals header present
                _this.communication.postNativeMessage(message);
            }
            return undefined;
        };
        this.onBeforeSendHeaders = function (details) {
            if (!_this.isMonitored(details)) {
                return undefined;
            }
            log_1.getLogger().debug("WebRequest.onBeforeSendHeaders", details);
            var frameState = _this.tabsStates.getFrame(details);
            // Skip unmonitored frames
            if (frameState == null) {
                return undefined;
            }
            // Mark down the time
            var requestState = _this.webRequestsStates.get(details.requestId);
            if (requestState != null) {
                requestState.storeEventTime(WebRequestEvent_1.WebRequestEvent.BeforeSendHeaders, details.timeStamp);
            }
            // Filter event
            var monitoredState = _this.getMonitoredState(frameState, details);
            if (!isMonitoredState(monitoredState)) {
                return undefined;
            }
            // Create message
            var message = _this.createDataMessage("BeforeSendHeaders", details, frameState);
            var eventData = message.messageData.Data[0];
            if (details.requestHeaders != null) {
                WebRequest.populateHeaders(details.requestHeaders, "requestHeaders", eventData);
            }
            if (_this.communication != null && monitoredState.monitorWebRequest) {
                _this.communication.postNativeMessage(message);
            }
            return undefined;
        };
        this.onSendHeaders = function (details) {
            if (!_this.isMonitored(details)) {
                return undefined;
            }
            log_1.getLogger().debug("WebRequest.onSendHeaders", details);
            var frameState = _this.tabsStates.getFrame(details);
            // Skip unmonitored frames
            if (frameState == null) {
                return undefined;
            }
            var requestState = _this.webRequestsStates.get(details.requestId);
            // Mark down the time
            if (requestState != null) {
                requestState.storeEventTime(WebRequestEvent_1.WebRequestEvent.SendHeaders, details.timeStamp);
            }
            // Filter event
            var monitoredState = _this.getMonitoredState(frameState, details);
            if (!isMonitoredState(monitoredState)) {
                return undefined;
            }
            // Create message
            var message = _this.createDataMessage("SendHeaders", details, frameState);
            var eventData = message.messageData.Data[0];
            if (details.requestHeaders != null) {
                WebRequest.populateHeaders(details.requestHeaders, "requestHeaders", eventData);
            }
            // Send the message
            if (_this.communication != null && monitoredState.monitorWebRequest) {
                _this.communication.postNativeMessage(message);
            }
            // Check we have requestState
            if (requestState != null) {
                // Send WebRequest.Start event
                if (!requestState.postedStart) {
                    // Validate request state
                    if (requestState.beforeRequestEvent == null ||
                        requestState.startMesageOrder == null) {
                        log_1.getLogger().error("Request state didn't initialize beforeRequestEvent or startMessageOrder");
                    }
                    else if (monitoredState.monitorWebRequest) {
                        _this.postStartMessage(details.requestHeaders, requestState.beforeRequestEvent, requestState.startMesageOrder);
                    }
                    requestState.postedStart = true;
                    delete requestState.beforeRequestEvent;
                }
                // Add outgoing bytes if we have them
                if (details.requestHeaders != null) {
                    requestState.totalOutgoingBytes += WebRequest.getContentLength(details, details.requestHeaders);
                }
                // Remember the time so we can subtract it once the server gets back to us.
                requestState.lastOnSendHeadersTs = details.timeStamp;
            }
            return undefined;
        };
        this.onHeadersReceived = function (details) {
            if (!_this.isMonitored(details)) {
                return undefined;
            }
            log_1.getLogger().debug("WebRequest.onHeadersReceived", details);
            var frameState = _this.tabsStates.getFrame(details);
            // Skip unmonitored frames
            if (frameState == null) {
                return undefined;
            }
            var requestState = _this.webRequestsStates.get(details.requestId);
            // Mark down the time
            if (requestState != null) {
                requestState.storeEventTime(WebRequestEvent_1.WebRequestEvent.HeadersReceived, details.timeStamp);
            }
            // Filter event
            var monitoredState = _this.getMonitoredState(frameState, details);
            if (!isMonitoredState(monitoredState)) {
                return undefined;
            }
            var message = _this.createDataMessage("HeadersReceived", details, frameState);
            var eventData = message.messageData.Data[0];
            if (details.responseHeaders != null) {
                WebRequest.populateHeaders(details.responseHeaders, "responseHeaders", eventData);
            }
            var statusCode = Utils.getStatusCode(details);
            if (statusCode != null) {
                frameState.statusCode = statusCode;
            }
            if (frameState.statusCode != null) {
                eventData.statusCode = frameState.statusCode;
            }
            eventData.statusLine = details.statusLine;
            // Check we have requestState
            if (requestState != null) {
                if (details.responseHeaders != null) {
                    // Update incoming bytes
                    requestState.totalIncomingBytes += WebRequest.getContentLength(details, details.responseHeaders);
                    // Check AppInternals header
                    if (WebRequest.WEBREQUEST_APPINTERNALS_RESPONSE_HEADER in eventData) {
                        // prefix, header.name.toLowerCase()
                        requestState.appInternalsMonitoring = true;
                    }
                }
                // Add (now - last On send headers) to get this request's server time
                requestState.totalServerTime += details.timeStamp - requestState.lastOnSendHeadersTs;
                requestState.lastOnSendHeadersTs = 0;
            }
            if (_this.communication != null && monitoredState.monitorWebRequest) {
                _this.communication.postNativeMessage(message);
            }
            return undefined;
        };
        this.onAuthRequired = function (details) {
            if (!_this.isMonitored(details)) {
                return undefined;
            }
            log_1.getLogger().debug("WebRequest.onAuthRequired", details);
            var frameState = _this.tabsStates.getFrame(details);
            // Skip unmonitored frames
            if (frameState == null) {
                return undefined;
            }
            // Mark down the time
            var requestState = _this.webRequestsStates.get(details.requestId);
            if (requestState != null) {
                requestState.storeEventTime(WebRequestEvent_1.WebRequestEvent.AuthRequired, details.timeStamp);
            }
            // Filter event
            var monitoredState = _this.getMonitoredState(frameState, details);
            if (!isMonitoredState(monitoredState)) {
                return undefined;
            }
            // Create message
            var message = _this.createDataMessage("AuthRequired", details, frameState);
            var eventData = message.messageData.Data[0];
            if (details.responseHeaders != null) {
                WebRequest.populateHeaders(details.responseHeaders, "responseHeaders", eventData);
            }
            eventData.statusLine = details.statusLine;
            eventData.isProxy = details.isProxy;
            if (details.realm != null) {
                eventData.realm = details.realm;
            }
            eventData.scheme = details.scheme;
            eventData.challengerHost = details.challenger.host;
            eventData.challengerPort = details.challenger.port;
            if (_this.communication != null && monitoredState.monitorWebRequest) {
                _this.communication.postNativeMessage(message);
            }
            return undefined;
        };
        this.onResponseStarted = function (details) {
            if (!_this.isMonitored(details)) {
                return undefined;
            }
            log_1.getLogger().debug("WebRequest.onResponseStarted", details);
            var frameState = _this.tabsStates.getFrame(details);
            // Skip unmonitored frames
            if (frameState == null) {
                return undefined;
            }
            if (_this.isFrameType(details.type)) {
                frameState.committedUrl = details.url;
                // Calculate configuration and put it into cache for faster page load.
                // Data URLs are ignored.
                if (_this.configuration != null) {
                    var mainFrameState = _this.tabsStates.getTab(details.tabId);
                    // Special handling for chrome shortcuts
                    var mainCommittedUrl = mainFrameState != null ? mainFrameState.committedUrl : "";
                    var tabReady = mainCommittedUrl != null && mainCommittedUrl !== "";
                    if (mainFrameState != null && !tabReady) {
                        // When running chrome with url on the command line mainFrameState might still have empty documentCommittedUrl,
                        // or even empty documentUrl. We must fall back to currentUrl, stripped of path (to support SPAs)
                        log_1.getLogger().warn("Tab", details.tabId, " committedUrl not ready, falling back to frame", details.frameId);
                        if (details.url !== undefined) {
                            var url = new URL(details.url);
                            mainCommittedUrl = url.protocol + "//" + url.hostname;
                            log_1.getLogger().warn("Using url:", mainCommittedUrl);
                            mainFrameState.committedUrl = mainCommittedUrl;
                        }
                    }
                    if (mainFrameState != null && mainFrameState.committedUrl != null) {
                        _this.configuration.getEventsForPage({
                            documentUrl: mainFrameState.startUrl,
                            documentCommittedUrl: mainFrameState.committedUrl
                        });
                    }
                }
            }
            // Mark down the time
            var requestState = _this.webRequestsStates.get(details.requestId);
            if (requestState != null) {
                requestState.storeEventTime(WebRequestEvent_1.WebRequestEvent.ResponseStarted, details.timeStamp);
            }
            var statusCode = Utils.getStatusCode(details);
            if (statusCode != null) {
                frameState.statusCode = statusCode;
            }
            // Filter event
            var monitoredState = _this.getMonitoredState(frameState, details);
            if (!isMonitoredState(monitoredState)) {
                return undefined;
            }
            // Create message
            var message = _this.createDataMessage("ResponseStarted", details, frameState);
            var eventData = message.messageData.Data[0];
            if (frameState.statusCode != null) {
                eventData.statusCode = frameState.statusCode;
            }
            if (details.responseHeaders != null) {
                WebRequest.populateHeaders(details.responseHeaders, "responseHeaders", eventData);
            }
            if (details.ip != null) {
                eventData.ip = details.ip;
            }
            eventData.statusLine = details.statusLine;
            eventData.statusCode = details.statusCode;
            eventData.fromCache = details.fromCache;
            if (_this.communication != null && monitoredState.monitorWebRequest) {
                _this.communication.postNativeMessage(message);
            }
            return undefined;
        };
        this.onBeforeRedirect = function (details) {
            if (!_this.isMonitored(details)) {
                return undefined;
            }
            log_1.getLogger().debug("WebRequest.onBeforeRedirect", details);
            var frameState = _this.tabsStates.getFrame(details);
            // Skip unmonitored frames
            if (frameState == null) {
                return undefined;
            }
            // Mark down the time
            var requestState = _this.webRequestsStates.get(details.requestId);
            if (requestState != null) {
                requestState.storeEventTime(WebRequestEvent_1.WebRequestEvent.BeforeRedirect, details.timeStamp);
            }
            // Filter event
            var monitoredState = _this.getMonitoredState(frameState, details);
            if (!isMonitoredState(monitoredState)) {
                return undefined;
            }
            // Create message
            var message = _this.createDataMessage("BeforeRedirect", details, frameState);
            var eventData = message.messageData.Data[0];
            if (details.responseHeaders != null) {
                WebRequest.populateHeaders(details.responseHeaders, "responseHeaders", eventData);
            }
            if (details.ip != null) {
                eventData.ip = details.ip;
            }
            eventData.statusLine = details.statusLine;
            eventData.statusCode = details.statusCode;
            eventData.fromCache = details.fromCache;
            eventData.redirectUrl = details.redirectUrl;
            // Data URI is a special case. There is no further requests.
            if (Utils.isDataUrl(details.redirectUrl)) {
                // Remove web request
                _this.webRequestsStates.remove(details.requestId);
                // Update committed url
                frameState.committedUrl = details.url;
                // Add more meta data for further analysis by the agent
                WebRequest.populateNetwork(requestState, details.timeStamp, eventData);
            }
            if (_this.communication != null && monitoredState.monitorWebRequest) {
                _this.communication.postNativeMessage(message);
            }
            return undefined;
        };
        this.onCompleted = function (details) {
            if (!_this.isMonitored(details)) {
                return undefined;
            }
            log_1.getLogger().debug("WebRequest.onCompleted", details);
            // Find the request
            var requestState = _this.webRequestsStates.get(details.requestId);
            // Remove web request
            _this.webRequestsStates.remove(details.requestId);
            var frameState = _this.tabsStates.getFrame(details);
            // Skip unmonitored frames
            if (frameState == null) {
                return undefined;
            }
            // Filter event
            var monitoredState = _this.getMonitoredState(frameState, details);
            if (!isMonitoredState(monitoredState)) {
                return undefined;
            }
            // Add additional data
            var message = _this.createDataMessage("Completed", details, frameState);
            var eventData = message.messageData.Data[0];
            if (details.responseHeaders != null) {
                WebRequest.populateHeaders(details.responseHeaders, "responseHeaders", eventData);
            }
            if (details.ip != null) {
                eventData.ip = details.ip;
            }
            eventData.statusLine = details.statusLine;
            eventData.statusCode = details.statusCode;
            eventData.fromCache = details.fromCache;
            var forcePost = false;
            // Mark down the time
            if (requestState != null) {
                requestState.storeEventTime(WebRequestEvent_1.WebRequestEvent.Completed, details.timeStamp);
                // Always post if AppInternals header present.
                forcePost = requestState.appInternalsMonitoring;
            }
            // Add more meta data for further analysis by the agent
            WebRequest.populateNetwork(requestState, details.timeStamp, eventData);
            if (_this.communication != null) {
                _this.communication.postNativeMessage(message, { forcePost: forcePost });
            }
            return undefined;
        };
        this.onErrorOccurred = function (details) {
            if (!_this.isMonitored(details)) {
                return undefined;
            }
            log_1.getLogger().debug("WebRequest.onErrorOccurred", details);
            // Find the request
            var requestState = _this.webRequestsStates.get(details.requestId);
            // Remove web request
            _this.webRequestsStates.remove(details.requestId);
            var frameState = _this.tabsStates.getFrame(details);
            // Skip unmonitored frames
            if (frameState == null) {
                return undefined;
            }
            // Filter event
            var monitoredState = _this.getMonitoredState(frameState, details);
            if (!isMonitoredState(monitoredState)) {
                return undefined;
            }
            // Mark down the time
            if (requestState != null) {
                requestState.storeEventTime(WebRequestEvent_1.WebRequestEvent.ErrorOccurred, details.timeStamp);
            }
            // Create message
            var message = _this.createDataMessage("ErrorOccurred", details, frameState);
            var eventData = message.messageData.Data[0];
            if (details.ip != null) {
                eventData.ip = details.ip;
            }
            eventData.error = details.error;
            eventData.fromCache = details.fromCache;
            // Add more meta data for further analysis by the agent
            WebRequest.populateNetwork(requestState, details.timeStamp, eventData);
            if (_this.communication != null && monitoredState.monitorWebRequest) {
                _this.communication.postNativeMessage(message);
            }
            return undefined;
        };
        /**
         * Message handler to pass configuration to content script.
         * The reason for handling message in WebRequest is to provide page information properties
         * with status code and frame ids.
         */
        this.onMessage = function (message, sender, sendResponse) {
            switch (message.messageType) {
                case MessagingModel_1.MessageType.CONTENT_SCRIPT_LOAD:
                    return _this.onContentScriptLoad(message, sender, sendResponse);
                case MessagingModel_1.MessageType.GET_STATUS_CODE:
                    _this.onGetStatusCode(sender, sendResponse);
                    break;
                default:
                    break;
            }
            return undefined;
        };
        this.tabsStates = tabsStates;
    }
    // #region Utility functions
    /**
     * Create base webRequest message.
     */
    WebRequest.prototype.createDataMessage = function (event, details, frameState) {
        var message = new MessagingModel_1.OutgoingEventMessage(makeEventName(event), details.timeStamp);
        var eventData = message.messageData.Data[0];
        eventData.requestId = details.requestId;
        eventData.url = details.url;
        if (typeof details.method !== "undefined") {
            eventData.method = details.method;
        }
        eventData.type = details.type;
        eventData.frameId = details.frameId;
        eventData.parentFrameId = details.parentFrameId;
        eventData.tabId = details.tabId;
        // Add urls
        eventData.frameUrl = frameState.startUrl;
        eventData.frameCurrentUrl = frameState.currentUrl;
        if (frameState.committedUrl != null) {
            eventData.frameCommittedUrl = frameState.committedUrl;
        }
        if (details.frameId === 0) {
            eventData.documentUrl = frameState.startUrl;
            eventData.documentCurrentUrl = frameState.currentUrl;
            if (frameState.committedUrl != null) {
                eventData.documentCommittedUrl = frameState.committedUrl;
            }
        }
        else {
            var mainFrameState = this.tabsStates.getTab(details.tabId);
            if (mainFrameState != null) {
                eventData.documentUrl = mainFrameState.startUrl;
                eventData.documentCurrentUrl = mainFrameState.currentUrl;
                if (mainFrameState.committedUrl != null) {
                    eventData.documentCommittedUrl = mainFrameState.committedUrl;
                }
            }
        }
        return message;
    };
    /*
     * Frame is either main_frame or sub_frame type.
     */
    WebRequest.prototype.isFrameType = function (type) {
        return type === "main_frame" || type === "sub_frame";
    };
    /**
     * @return true if the tab is monitored or false otherwise.
     */
    WebRequest.prototype.isMonitored = function (details, validateTabState) {
        if (validateTabState === void 0) { validateTabState = true; }
        if (this.manager == null)
            return false;
        return this.manager.active &&
            // tabId set to -1 if the request isn't related to a tab.
            details.tabId !== -1 &&
            (!validateTabState || this.tabsStates.getTab(details.tabId) != null);
    };
    /**
     * Check filters according to configuration
     * If the main frame doesn't exist, the given frame is not monitored since we don't know
     * the URL of the page.
     */
    WebRequest.prototype.getMonitoredState = function (frameState, details) {
        var mainFrameState = details.frameId === 0 ?
            frameState :
            this.tabsStates.getTab(details.tabId);
        // No main frame state, not monitoring.
        if (mainFrameState == null || this.configuration == null) {
            return { monitorWebRequest: false, monitorWPM: false };
        }
        var configuration = this.configuration;
        var documentNavigationUrl = mainFrameState.startUrl;
        var monitorWebRequest = this.isWebRequestMonitored(configuration, mainFrameState, details);
        var monitorWPM = this.configuration.isMatchForWpmUrls(documentNavigationUrl, mainFrameState.committedUrl) ||
            this.configuration.isMatchForHttpWebPageLoadUrl(documentNavigationUrl);
        return { monitorWebRequest: monitorWebRequest, monitorWPM: monitorWPM };
    };
    /**
     * Check whether webRequest should be reported for this tab.
     */
    WebRequest.prototype.isWebRequestMonitored = function (configuration, mainFrameState, details) {
        var documentNavigationUrl = mainFrameState.startUrl;
        // Check documentUrl and type
        if (configuration.isMatchWebRequestEvent("documentUrl", documentNavigationUrl) &&
            configuration.isMatchWebRequestEvent("type", details.type)) {
            return true;
        }
        // If there are no documentCommittedUrl filters, don't report webRequest.
        if (!configuration.hasWebRequestFilter("documentCommittedUrl")) {
            return false;
        }
        // Main frame is always reported when documentCommittedUrl filter is present.
        if (details.type === "main_frame") {
            return true;
        }
        // documentCommitted url should be set in onResponseStarted callback of main frame.
        // If it is not set, something bad happened, don't report.
        var documentCommittedUrl = mainFrameState.committedUrl;
        if (documentCommittedUrl == null) {
            return false;
        }
        // Check documentCommittedUrl and type
        return configuration.isMatchWebRequestEvent("documentCommittedUrl", documentCommittedUrl) &&
            configuration.isMatchWebRequestEvent("type", details.type);
    };
    // tslint:disable-next-line readonly-array
    WebRequest.makeKey = function () {
        var s = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            s[_i] = arguments[_i];
        }
        return s.join(Consts.KEY_DELIMITER);
    };
    WebRequest.getContentLength = function (details, headers) {
        var contentLength = 0;
        var headersLength = 0;
        for (var _i = 0, headers_1 = headers; _i < headers_1.length; _i++) {
            var header = headers_1[_i];
            if (header.name.toLowerCase() === "content-length") {
                if (typeof header.value !== "undefined") {
                    contentLength = parseInt(header.value, 10);
                }
            }
            else {
                headersLength += header.name.length;
                if (typeof header.value !== "undefined") {
                    headersLength += header.value.length;
                }
            }
        }
        // Sometimes no Content-Length is received, we calculate an approximation ourselves
        if (contentLength === 0 && typeof details.url !== "undefined") {
            contentLength += details.url.length;
        }
        return contentLength + headersLength;
    };
    // #endregion
    // #region Populate utility private
    /**
     * Returns normalized header proprety key.
     */
    WebRequest.makeHeaderProperty = function (prefix, header) {
        return WebRequest.makeKey(prefix, header.toLowerCase());
    };
    /**
     * Add headers to the object.
     * The headers are added with the given prefix.
     *
     * Header name is case insensitive, therefore it is converted to lowercase.
     */
    WebRequest.populateHeaders = function (headers, prefix, eventData) {
        if (headers == null) {
            return;
        }
        for (var _i = 0, headers_2 = headers; _i < headers_2.length; _i++) {
            var header = headers_2[_i];
            var key = WebRequest.makeKey(prefix, header.name.toLowerCase());
            if (header.value != null) {
                eventData[key] = header.value;
            }
            else {
                eventData[key] = "|BinaryValue|";
            }
        }
    };
    /**
     * Add network values.
     */
    WebRequest.populateNetwork = function (requestState, timeStamp, eventData) {
        if (requestState == null) {
            return;
        }
        eventData.aternityIncomingBytes = requestState.totalIncomingBytes;
        eventData.aternityOutgoingBytes = requestState.totalOutgoingBytes;
        eventData.aternityNetworkStartTime = Math.floor(requestState.requestStartTime);
        eventData.aternityNetworkEndTime = Math.floor(timeStamp);
        eventData.aternityTotalServerTime = Math.floor(requestState.totalServerTime);
        eventData.aternityEventTimes = JSON.stringify(requestState.eventTimes);
    };
    WebRequest.isFieldBlacklisted = function (fieldName) {
        return WebRequest.passwordRegEx.test(fieldName);
    };
    /**
     * Add formData as array of strings
     * @return ~total number of chars (NOT EXACT!)
     */
    WebRequest.prototype.populateFormData = function (
    // tslint:disable-next-line readonly-array
    formData, eventData) {
        var ret = 0;
        for (var name_1 in formData) {
            if (!formData.hasOwnProperty(name_1))
                continue;
            ret += name_1.length + formData[name_1].toString().length;
            if (WebRequest.isFieldBlacklisted(name_1)) {
                log_1.getLogger().debug("Just filtered " + name_1 + ".");
                continue;
            }
            var key = WebRequest.makeKey("formData", name_1);
            // Workaround Firefox parsing incorrect formData which is not in key=value format.
            // When the request body is not in the correct format, it creates a key with value of undefined.
            // Make an empty value instead.
            if (!(formData[name_1].length === 1 && formData[name_1][0] === undefined)) {
                Utils.concatOrInit(eventData, key, formData[name_1]);
            }
            else {
                eventData[key] = [];
            }
        }
        return ret;
    };
    /**
     * Adds a new frame to tabs states and a new requestId to webRequests states.
     */
    WebRequest.prototype.addFrame = function (details) {
        return this.tabsStates.addFrame(details.tabId, details.frameId, details.url, details.type, details.requestId);
    };
    WebRequest.prototype.postStartMessage = function (
    // tslint:disable-next-line readonly-array
    requestHeaders, originalMessage, order) {
        // Make a new message with combined data and time stamp from BeforeRequest
        var startMessage = new MessagingModel_1.OutgoingEventMessage(makeEventName("Start"), originalMessage.timeStamp);
        startMessage.order = order;
        startMessage.messageData.Data = originalMessage.messageData.Data;
        // Add requestHeaders
        var eventData = startMessage.messageData.Data[0];
        if (requestHeaders != null) {
            WebRequest.populateHeaders(requestHeaders, "requestHeaders", eventData);
        }
        if (this.communication != null) {
            this.communication.postNativeMessage(startMessage);
        }
    };
    WebRequest.prototype.onContentScriptLoad = function (message, sender, sendResponse) {
        var _this = this;
        if (this.configuration == null) {
            log_1.getLogger().log("No configuration, no reply");
            return false;
        }
        if (sender.tab == null || sender.tab.id == null) {
            return false;
        }
        // Determine if this is the content script was loaded by the main frame of the page, or by some
        // sub frame.
        var frameId = sender.frameId != null ? sender.frameId : -1;
        var isMainFrame = (frameId === 0);
        var tabId = sender.tab.id;
        var configuration = this.configuration;
        var mainFrameState = this.tabsStates.getTab(tabId);
        // Special handling for Chrome shortcuts
        var committedUrl = mainFrameState != null ? mainFrameState.committedUrl : "";
        var tabReady = committedUrl != null && committedUrl !== "";
        if (mainFrameState != null && !tabReady) {
            // When running chrome with url on the command line mainFrameState might still have empty documentCommittedUrl,
            // or even empty documentUrl. We must fall back to currentUrl, stripped of path (to support SPAs)
            log_1.getLogger().warn("Tab" + tabId + " committedUrl not ready, falling back to currentUrl host");
            if (sender.tab.url !== undefined) {
                var url = new URL(sender.tab.url);
                committedUrl = url.protocol + "//" + url.hostname;
                log_1.getLogger().log("Using url: " + committedUrl);
                mainFrameState.committedUrl = committedUrl;
            }
        }
        // Send the response asynchronously, so that we don't block content.
        setTimeout(function () { _this.onContentScriptLoadImpl(tabId, frameId, isMainFrame, configuration, sendResponse); }, 0);
        // Keep connection with content script opened.
        return true;
    };
    WebRequest.prototype.onContentScriptLoadImpl = function (tabId, frameId, isMainFrame, configuration, sendResponse) {
        try {
            var mainFrameState = this.tabsStates.getTab(tabId);
            // Frame not present means that extension ran after it has been loaded.
            var currentFrameState = frameId !== -1
                ? this.tabsStates.getFrame({ tabId: tabId, frameId: frameId })
                : null;
            var wpmParameters = {
                wpm: false,
                httpWebPageLoad: false
            };
            if (mainFrameState != null) {
                if (isMainFrame) {
                    wpmParameters.wpm =
                        configuration.isMatchForWpmUrls(mainFrameState.startUrl, mainFrameState.committedUrl);
                }
                wpmParameters.httpWebPageLoad = configuration.isMatchForHttpWebPageLoadUrl(mainFrameState.startUrl);
            }
            var documentUrl = mainFrameState != null ? mainFrameState.startUrl : "";
            var documentCommittedUrl = (mainFrameState != null && mainFrameState.committedUrl != null) ? mainFrameState.committedUrl : "";
            var documentTitle = undefined;
            if (this.tabsMonitoring != null) {
                var tabState = this.tabsMonitoring.getTabState(tabId);
                if (tabState != null) {
                    documentTitle = tabState.documentTitle;
                }
            }
            var response = {
                configurationData: configuration.getEventsForPage({
                    documentUrl: documentUrl,
                    documentCommittedUrl: documentCommittedUrl
                }),
                pageInformation: {
                    documentUrl: documentUrl,
                    documentCommittedUrl: documentCommittedUrl,
                    frameUrl: currentFrameState != null ? currentFrameState.startUrl : "",
                    frameCommittedUrl: currentFrameState != null
                        ? currentFrameState.committedUrl != null
                            ? currentFrameState.committedUrl : "" : "",
                    tabId: tabId,
                    frameId: frameId,
                },
                statusCode: currentFrameState != null ? currentFrameState.statusCode : 0,
                wpmParameters: wpmParameters,
                documentTitle: documentTitle,
            };
            sendResponse(response);
            log_1.getLogger().info("Sent configuration to content", response);
        }
        catch (e) {
            log_1.getLogger().warn("Couldn't send configuration to tab: " + tabId + ", frame: " + frameId + ", error: ", e);
        }
    };
    WebRequest.prototype.onGetStatusCode = function (sender, sendResponse) {
        var tabId = sender.tab != null && sender.tab.id != null
            ? sender.tab.id
            : -1;
        // ReSharper disable once AssignedValueIsNeverUsed
        var statusCode = -1;
        var currentFrame = sender.frameId != null
            ? this.tabsStates.getFrame({ tabId: tabId, frameId: sender.frameId })
            : null;
        if (currentFrame == null) {
            log_1.getLogger().error("Did not receive frameId from sender. Probably not supported in this Chrome version.");
            statusCode = -1;
        }
        else if (currentFrame.statusCode == null) {
            log_1.getLogger().error("Did not receive statusCode.");
            statusCode = -1;
        }
        else {
            statusCode = currentFrame.statusCode;
        }
        sendResponse({ statusCode: statusCode });
    };
    // #endregion
    WebRequest.prototype.initWebRequest = function (manager, communication, tabsMonitoring, configuration) {
        this.manager = manager;
        this.communication = communication;
        this.tabsMonitoring = tabsMonitoring;
        this.configuration = configuration;
        var filter = { urls: ["<all_urls>"] };
        webRequest.onBeforeRequest.addListener(this.onBeforeRequest, filter, ["requestBody"]);
        webRequest.onBeforeSendHeaders.addListener(this.onBeforeSendHeaders, filter, ["requestHeaders"]);
        webRequest.onSendHeaders.addListener(this.onSendHeaders, filter, ["requestHeaders"]);
        webRequest.onHeadersReceived.addListener(this.onHeadersReceived, filter, ["responseHeaders"]);
        webRequest.onAuthRequired.addListener(this.onAuthRequired, filter, ["responseHeaders"]);
        webRequest.onResponseStarted.addListener(this.onResponseStarted, filter, ["responseHeaders"]);
        webRequest.onBeforeRedirect.addListener(this.onBeforeRedirect, filter, ["responseHeaders"]);
        webRequest.onCompleted.addListener(this.onCompleted, filter, ["responseHeaders"]);
        webRequest.onErrorOccurred.addListener(this.onErrorOccurred, filter);
        chrome.runtime.onMessage.addListener(this.onMessage);
        this.tabsStates.validateAllTabs();
    };
    WebRequest.prototype.uninitWebRequest = function () {
        webRequest.onBeforeRequest.removeListener(this.onBeforeRequest);
        webRequest.onBeforeSendHeaders.removeListener(this.onBeforeSendHeaders);
        webRequest.onSendHeaders.removeListener(this.onSendHeaders);
        webRequest.onHeadersReceived.removeListener(this.onHeadersReceived);
        webRequest.onAuthRequired.removeListener(this.onAuthRequired);
        webRequest.onResponseStarted.removeListener(this.onResponseStarted);
        webRequest.onBeforeRedirect.removeListener(this.onBeforeRedirect);
        webRequest.onCompleted.removeListener(this.onCompleted);
        webRequest.onErrorOccurred.removeListener(this.onErrorOccurred);
        chrome.runtime.onMessage.removeListener(this.onMessage);
        this.manager = undefined;
        this.communication = undefined;
        this.configuration = undefined;
        this.tabsMonitoring = undefined;
    };
    /**
     * Header indicating AppInternals monitoring.
     */
    WebRequest.APPINTERNALS_TRACE_HEADER = "X-OPNET-Transaction-Trace";
    /**
     * Header indicating AppInternals monitoring in UX property format.
     */
    WebRequest.WEBREQUEST_APPINTERNALS_RESPONSE_HEADER = WebRequest.makeHeaderProperty("responseHeaders", WebRequest.APPINTERNALS_TRACE_HEADER);
    /**
     * We don't want to send out passwords (if we can help it)
     * Most websites use the same names for password fields, so we try and find those values
     */
    WebRequest.passwordRegEx = new RegExp("(.*pwd$)|(pass)|(.*pw$)|(heslo)|(contraseña)|(contrasena)|(adgangskode)|" +
        "(пароль)|(senha)|(ordine)|(paswoord)|(密码)|(密碼)|(पासवर्ड)|(סיס)", "i");
    return WebRequest;
}());
exports.WebRequest = WebRequest;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// ReSharper disable InconsistentNaming
/**
 * WebRequest events.
 * This must be synchronized with the Agent.
 */
var WebRequestEvent;
(function (WebRequestEvent) {
    WebRequestEvent[WebRequestEvent["BeforeRequest"] = 0] = "BeforeRequest";
    WebRequestEvent[WebRequestEvent["BeforeSendHeaders"] = 1] = "BeforeSendHeaders";
    WebRequestEvent[WebRequestEvent["SendHeaders"] = 2] = "SendHeaders";
    WebRequestEvent[WebRequestEvent["HeadersReceived"] = 3] = "HeadersReceived";
    WebRequestEvent[WebRequestEvent["AuthRequired"] = 4] = "AuthRequired";
    WebRequestEvent[WebRequestEvent["ResponseStarted"] = 5] = "ResponseStarted";
    WebRequestEvent[WebRequestEvent["BeforeRedirect"] = 6] = "BeforeRedirect";
    WebRequestEvent[WebRequestEvent["Completed"] = 7] = "Completed";
    WebRequestEvent[WebRequestEvent["ErrorOccurred"] = 8] = "ErrorOccurred";
})(WebRequestEvent = exports.WebRequestEvent || (exports.WebRequestEvent = {}));


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var Utils = __webpack_require__(0);
var timeProvider_1 = __webpack_require__(3);
var MessagingModel_1 = __webpack_require__(2);
exports.IDLE_EVENT_NAMESPACE = "ui:chrome:Idle";
function makeEventName(event) {
    return exports.IDLE_EVENT_NAMESPACE + "." + event;
}
/**
 * Create base tab message.
 */
function createDataMessage(event) {
    var message = new MessagingModel_1.OutgoingEventMessage(makeEventName(event), timeProvider_1.timeProvider.now());
    return message;
}
var IdleMonitoring = /** @class */ (function () {
    function IdleMonitoring() {
        var _this = this;
        this.onStateChanged = function (newState) {
            if (_this.manager == null || !_this.manager.active) {
                return;
            }
            log_1.getLogger().debug("Idle onStateChanged", newState);
            var message = createDataMessage(Utils.capitalize(newState));
            if (_this.communication != null) {
                _this.communication.postNativeMessage(message);
            }
        };
        this.idleMonitoringEnabled = false;
    }
    IdleMonitoring.prototype.initIdleMonitoring = function (manager, communication) {
        if (this.idleMonitoringEnabled) {
            log_1.getLogger().error("You can't init idle monitoring twice in a row (without uninit)");
            return;
        }
        this.manager = manager;
        this.communication = communication;
        this.idleMonitoringEnabled = true;
        if (chrome.idle.onStateChanged != null) {
            chrome.idle.onStateChanged.addListener(this.onStateChanged);
        }
    };
    IdleMonitoring.prototype.uninitIdleMonitoring = function () {
        this.idleMonitoringEnabled = false;
        if (chrome.idle.onStateChanged != null) {
            chrome.idle.onStateChanged.removeListener(this.onStateChanged);
        }
    };
    return IdleMonitoring;
}());
exports.IdleMonitoring = IdleMonitoring;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var timeProvider_1 = __webpack_require__(3);
var MessagingModel_1 = __webpack_require__(2);
// #region Utility
exports.WINDOW_EVENT_NAMESPACE = "ui:chrome:Window";
function makeEventName(event) {
    return exports.WINDOW_EVENT_NAMESPACE + "." + event;
}
/**
 * Create base tab message.
 */
function createDataMessage(event, timestamp, tab) {
    if (timestamp === void 0) { timestamp = timeProvider_1.timeProvider.now(); }
    var message = new MessagingModel_1.OutgoingEventMessage(makeEventName(event), timestamp);
    var messageData = message.messageData.Data[0];
    if (tab != null) {
        messageData.windowId = tab.windowId;
        messageData.tabId = tab.id;
        messageData.url = tab.url;
    }
    return message;
}
// #endregion
var WindowsMonitoring = /** @class */ (function () {
    function WindowsMonitoring() {
        var _this = this;
        this.onFocusChanged = function (windowId) {
            if (_this.manager == null || !_this.manager.active) {
                return;
            }
            var communication = _this.communication;
            if (communication == null) {
                return;
            }
            if (windowId !== chrome.windows.WINDOW_ID_NONE) {
                var now_1 = timeProvider_1.timeProvider.now();
                chrome.tabs.query({ active: true, windowId: windowId }, function (result) {
                    var tab = (result != null && result.length >= 0 ? result[0] : undefined);
                    log_1.getLogger().debug("Window onFocusChanged", tab);
                    var message = createDataMessage("FocusChanged", now_1, tab);
                    communication.postNativeMessage(message);
                });
            }
            else {
                log_1.getLogger().debug("Window LostFocus");
                var message = createDataMessage("LostFocus");
                communication.postNativeMessage(message);
            }
        };
        this.windowMonitoringEnabled = false;
    }
    WindowsMonitoring.prototype.initWindowsMonitoring = function (manager, communication) {
        if (this.windowMonitoringEnabled) {
            log_1.getLogger().error("You can't init windows monitoring twice in a row (without uninit)");
            return;
        }
        this.manager = manager;
        this.communication = communication;
        this.windowMonitoringEnabled = true;
        chrome.windows.onFocusChanged.addListener(this.onFocusChanged);
    };
    WindowsMonitoring.prototype.uninitWindowsMonitoring = function () {
        this.windowMonitoringEnabled = false;
        chrome.windows.onFocusChanged.removeListener(this.onFocusChanged);
    };
    return WindowsMonitoring;
}());
exports.WindowsMonitoring = WindowsMonitoring;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var utils_1 = __webpack_require__(0);
/**
 * Execute script with error handling in a specified tab.
 */
function executeFunctionInTab(tab, f, method) {
    if (typeof tab.id === "undefined")
        return;
    if (tab.url == null)
        return;
    if (!utils_1.startsWith(tab.url, "http"))
        return;
    chrome.scripting.executeScript({
        target: { tabId: tab.id, allFrames: true }, func: f, args: []
    }).then(function (value) {
        if (chrome.runtime.lastError != null) {
            // ReSharper disable once TsResolvedFromInaccessibleModule
            log_1.getLogger().error("Could not execute " + method + " in tab", tab.id, chrome.runtime.lastError.message);
        }
    }).catch(function (reason) {
        // ReSharper disable once TsResolvedFromInaccessibleModule
        log_1.getLogger().error("Could not execute " + method + " in tab", tab.id, reason);
    });
    // chrome.tabs.executeScript(tab.id,
    // 	{
    // 		code: makeFunctionCall(f),
    // 		allFrames: true
    // 	},
    // 	() => {
    // 		if (chrome.runtime.lastError != null) {
    // 			// ReSharper disable once TsResolvedFromInaccessibleModule
    // 			getLogger().error(`Could not execute ${method} in tab`, tab.id, chrome.runtime.lastError.message);
    // 		}
    // 	}
    // );
}
exports.executeFunctionInTab = executeFunctionInTab;
/**
 * Send message with error handling to a specified tab.
 */
function sendMessageToTab(tab, frameId, message, success, failure) {
    if (typeof tab.id === "undefined")
        return;
    if (tab.url == null)
        return;
    if (!utils_1.startsWith(tab.url, "http"))
        return;
    chrome.tabs.sendMessage(tab.id, message, { frameId: frameId }, function (response) {
        if (chrome.runtime.lastError == null) {
            if (success != null)
                success(response);
        }
        else {
            if (success === undefined &&
                chrome.runtime.lastError.message === "The message port closed before a response was received.") {
                // This is expected and could be avoided by sendMessage without a response callback.
                // We still call sendMessage this way to log any other errors.
                return;
            }
            if (failure != null)
                failure(chrome.runtime.lastError);
        }
    });
}
exports.sendMessageToTab = sendMessageToTab;
/**
 * Send message with error handling to a specified tab.
 */
function sendMessageToTabWithLog(tab, message) {
    sendMessageToTab(tab, undefined, message, undefined, function (lastError) {
        log_1.getLogger().error("Could not send message to tab", tab.id, "error:", lastError.message, "message to be sent:", message);
    });
}
exports.sendMessageToTabWithLog = sendMessageToTabWithLog;


/***/ }),
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(57);


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Make logging globally visible
var log_1 = __webpack_require__(1);
exports.enableLogs = log_1.enableLogs;
exports.disableLogs = log_1.disableLogs;
var AgentCommunication_1 = __webpack_require__(58);
var BackgroundManager_1 = __webpack_require__(60);
var WebRequest_1 = __webpack_require__(32);
var WebNavigation_1 = __webpack_require__(64);
var TabsMonitoring_1 = __webpack_require__(66);
var WindowsMonitoring_1 = __webpack_require__(35);
var IdleMonitoring_1 = __webpack_require__(34);
var HtmlEventsMonitoring_1 = __webpack_require__(67);
var WacCommunication_1 = __webpack_require__(68);
var ConfigurationManager_1 = __webpack_require__(70);
var WacEventReporter_1 = __webpack_require__(73);
var DownloadsMonitoring_1 = __webpack_require__(22);
var configurationManager = new ConfigurationManager_1.ConfigurationManager();
var wacCommunication = new WacCommunication_1.WacCommunication();
var wacEventReporter = new WacEventReporter_1.WacEventReporter(wacCommunication);
var communication = new AgentCommunication_1.AgentCommunication(wacCommunication, configurationManager, wacCommunication, wacEventReporter);
var webNavigation = new WebNavigation_1.WebNavigation();
var webRequest = new WebRequest_1.WebRequest(webNavigation.webNavigationTabsStates);
var tabsMonitoring = new TabsMonitoring_1.TabsMonitoring();
var windowsMonitoring = new WindowsMonitoring_1.WindowsMonitoring();
var idleMonitoring = new IdleMonitoring_1.IdleMonitoring();
var htmlEventsMonitoring = new HtmlEventsMonitoring_1.HtmlEventsMonitoring();
var downloadsMonitoring = new DownloadsMonitoring_1.DownloadsMonitoring();
exports.manager = new BackgroundManager_1.BackgroundManager(communication, configurationManager, tabsMonitoring, webRequest, webNavigation, windowsMonitoring, idleMonitoring, htmlEventsMonitoring, wacCommunication, downloadsMonitoring);


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Utils = __webpack_require__(0);
var Pako = __webpack_require__(59);
var Consts = __webpack_require__(4);
var log_1 = __webpack_require__(1);
var utils_1 = __webpack_require__(0);
var FrameType_1 = __webpack_require__(11);
var MessageOrder_1 = __webpack_require__(30);
var NativeMessaging = __webpack_require__(31);
var NativeMessaging_1 = __webpack_require__(31);
var MessagingModel_1 = __webpack_require__(2);
var DownloadsMonitoring_1 = __webpack_require__(22);
var browserInfo_1 = __webpack_require__(8);
var AgentCommunication = /** @class */ (function () {
    function AgentCommunication(wacNativeCommunication, configurationManager, wacCommunication, wacEventReporter) {
        var _this = this;
        this.wacNativeCommunication = wacNativeCommunication;
        this.configurationManager = configurationManager;
        this.wacCommunication = wacCommunication;
        this.wacEventReporter = wacEventReporter;
        // tslint:disable-next-line no-any
        this.onNativeMessage = function (message) {
            log_1.getLogger().log("message", message);
            if (_this.manager == null) {
                return;
            }
            // Validate parameters
            if (message == null) {
                log_1.getLogger().error("Invalid request, no parameters");
                return;
            }
            var incomingMessage = {};
            if (typeof message !== "object") {
                log_1.getLogger().error("Invalid request, not object type");
                return;
            }
            incomingMessage = message;
            if (incomingMessage.version !== NativeMessaging.INCOMING_VERSION) {
                log_1.getLogger().error("Incoming message version is not supported", incomingMessage);
                return;
            }
            switch (incomingMessage.type) {
                case NativeMessaging_1.IncomingAction.Configuration:
                    /* tslint:disable no-unsafe-any */
                    var encoded = JSON.parse(incomingMessage.data).Configuration;
                    var decoded = atob(encoded);
                    // Unzip data
                    // ReSharper bug: The cast is must to get string return type.
                    // tslint:disable-next-line no-object-literal-type-assertion
                    var unzippedJson = Pako.inflate(Utils.binstring2Buf(decoded), { to: "string" });
                    _this.configurationManager.setAgentConfiguration(unzippedJson);
                    break;
                case NativeMessaging_1.IncomingAction.Deactivate:
                    _this.manager.deactivate();
                    break;
                case NativeMessaging_1.IncomingAction.WacMessage:
                    if (message.message == null) {
                        log_1.getLogger().log("Incoming WAC message has null data", incomingMessage);
                        // return;
                    }
                    else {
                        if (typeof message.message === "string") {
                            message.message = JSON.parse(message.message);
                        }
                    }
                    _this.wacNativeCommunication.incomingMessage(message);
                    break;
                default:
                    log_1.getLogger().error("Unsupported message", message);
            }
        };
        /** Forward message from content to native */
        // tslint:disable-next-line no-any
        this.onRuntimeMessage = function (message, sender, sendResponse) {
            if (message.messageType == null || MessagingModel_1.CONTENT_MESSAGES.indexOf(message.messageType) !== -1)
                return;
            // Enrich it with tabId and frameId
            if (sender != null) {
                if (sender.tab != null) {
                    message.tabId = sender.tab.id;
                }
                if (typeof (sender.frameId) !== "undefined") {
                    message.frameId = sender.frameId;
                }
            }
            if (_this.validateMessageStructure(message)) {
                _this.postNativeMessage(message);
            }
            else {
                log_1.getLogger().error("Message structure is not according to protocol.", message);
                return;
            }
        };
    }
    // tslint:disable-next-line no-any
    AgentCommunication.prototype.validateMessageStructure = function (message) {
        var _this = this;
        if (typeof message.messageType !== "string") {
            return false;
        }
        if (typeof message.timeStamp !== "number") {
            return false;
        }
        // messageData either absent or array
        // See Data.OutgoingEventMessage and Data.OutgoingWpmPageLoadEventMessage for instance.
        var messageData = message.messageData;
        if (messageData === undefined) {
            return true;
        }
        else {
            var data = message.messageData.Data;
            if (!Array.isArray(data)) {
                return false;
            }
            // tslint:disable-next-line no-any
            return !data.some(function (d) { return !_this.validateMessageDataStructure(d); });
        }
    };
    /* tslint:disable-next-line no-any no-unsafe-any */
    AgentCommunication.prototype.validateMessageDataStructure = function (messageData) {
        for (var propertyName in messageData) {
            if (!messageData.hasOwnProperty(propertyName))
                continue;
            var value = messageData[propertyName];
            if (utils_1.isSerializablePrimitive(value)) {
                continue;
            }
            else if (Array.isArray(value)) {
                // tslint:disable-next-line no-any
                if (value.some(function (element) { return !utils_1.isSerializablePrimitive(element); })) {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        return true;
    };
    AgentCommunication.prototype.onDisconnect = function (unsubscribeRuntimeMessage) {
        log_1.getLogger().info("NMH disconnected");
        if (unsubscribeRuntimeMessage) {
            chrome.runtime.onMessage.removeListener(this.onRuntimeMessage);
        }
        if (this.nativeMessagingPort != null) {
            this.nativeMessagingPort.onMessage.removeListener(this.onNativeMessage);
            if (this.disconnectCallback != null) {
                this.nativeMessagingPort.onDisconnect.removeListener(this.disconnectCallback);
            }
        }
        this.disconnectCallback = undefined;
        this.nativeMessagingPort = undefined;
        // Reset configuration
        this.configurationManager.resetConfiguration();
        // Ask the manager to try to connect again...
        if (this.manager != null) {
            this.manager.scheduleConnectAttempt();
        }
    };
    AgentCommunication.prototype.start = function (onlineConfiguration) {
        var _this = this;
        if (onlineConfiguration === void 0) { onlineConfiguration = true; }
        try {
            var port = undefined;
            if (onlineConfiguration) {
                console.trace("Starting and connecting NMH");
                port = chrome.runtime.connectNative(AgentCommunication.HOST_NAME);
            }
            chrome.runtime.onMessage.removeListener(this.onRuntimeMessage);
            chrome.runtime.onMessage.addListener(this.onRuntimeMessage);
            if (this.disconnectCallback != null) {
                if (this.nativeMessagingPort != null) {
                    this.nativeMessagingPort.onDisconnect.removeListener(this.disconnectCallback);
                }
            }
            if (onlineConfiguration && port != null) {
                port.onMessage.addListener(this.onNativeMessage);
                this.disconnectCallback = function () { return _this.onDisconnect(onlineConfiguration); };
                if (this.disconnectCallback != null) {
                    port.onDisconnect.addListener(this.disconnectCallback);
                }
                log_1.getLogger().info("Connect");
                var message = "Connected extension with id " + chrome.runtime.id;
                port.postMessage(new MessagingModel_1.OutgoingLogMessage(Consts.LogLevel.INFO, message));
            }
            return port;
        }
        catch (e) {
            log_1.getLogger().error("Cannot connect to native messaging. Pages are not monitored. ", e);
            return undefined;
        }
    };
    AgentCommunication.prototype.stop = function () {
        if (this.nativeMessagingPort != null) {
            chrome.runtime.onMessage.removeListener(this.onRuntimeMessage);
            this.nativeMessagingPort.onMessage.removeListener(this.onNativeMessage);
            if (this.disconnectCallback != null) {
                this.nativeMessagingPort.onDisconnect.removeListener(this.disconnectCallback);
            }
            this.disconnectCallback = undefined;
            this.nativeMessagingPort = undefined;
        }
    };
    // todo: Idea, Move to class Reporter
    /**
     * Post message to the native messaging host.
     * WARNING: This private changes the object.
     */
    AgentCommunication.prototype.postNativeMessage = function (message, options) {
        if (options === void 0) { options = { forcePost: false }; }
        if (this.manager == null) {
            return;
        }
        var messageProcessor = this.manager.getMessageProcessor();
        if (messageProcessor == null) {
            return;
        }
        // Do not send messages if not activated. Log is exception.
        if (!this.manager.active && message.messageType !== MessagingModel_1.MessageType.LOG) {
            return;
        }
        // Add data for event message
        if (message.messageType === MessagingModel_1.MessageType.EVENT) {
            var messageData = message.messageData;
            if (messageData == null) {
                return;
            }
            // Negative value messages are always sent
            if (messageData.EventType === MessagingModel_1.NV_CHROME_WORKTIME_VIOLATION) {
                options.forcePost = true;
            }
            // Downloads events are only reported if they are configured
            if (Utils.startsWith(messageData.EventType, DownloadsMonitoring_1.DOWNLOADS_EVENT_NAMESPACE)) {
                options.forcePost = true;
            }
            // Filter out unmonitored events
            if (!options.forcePost && !messageProcessor.isEventMonitored(messageData)) {
                return;
            }
            // Handle optional AppInternals information
            var pageMessage = message;
            var tabId = pageMessage.tabId != null ? pageMessage.tabId : messageData.Data[0]["tabId"];
            var frameId = pageMessage.frameId != null ? pageMessage.frameId : messageData.Data[0]["frameId"];
            if (tabId != null && frameId != null) {
                this.addPageInformationProperties(tabId, frameId, messageData);
            }
            // WAC mode
            if (this.wacEventReporter.wacMode()) {
                this.wacEventReporter.reportToWac(pageMessage);
                return;
            }
            // Adjust the timestamp of the WPM page error message, since it can be timestamped earlier than the corresponding committed event
            if (messageData.EventType === MessagingModel_1.WPM_PAGE_ERROR_UX) {
                var now = Date.now().valueOf();
                if (message.timeStamp < now) {
                    message.timeStamp = now;
                }
            }
            messageProcessor.processMessageData(messageData, options);
            this.addAdditionalData(messageData);
            log_1.getLogger().log("Sending event to native", message.timeStamp, messageData);
        }
        else if (message.messageType === MessagingModel_1.MessageType.WPM_PAGELOAD_EVENT ||
            message.messageType === MessagingModel_1.MessageType.WPM_ERROR_EVENT) {
            log_1.getLogger().log("Sending wpm to native", message);
        }
        else if (message.messageType === MessagingModel_1.MessageType.LOG) {
            log_1.getLogger().log("Logging", message.message);
        }
        else if (message.messageType === MessagingModel_1.MessageType.WAC_TO_IE) {
            log_1.getLogger().log("Sending WACtoIE to native", message);
        }
        else {
            log_1.getLogger().warn("Unknown message type", message.messageType);
        }
        if (this.nativeMessagingPort != null) {
            // Set order only if wasn't set manually
            if (typeof message.order === "undefined") {
                message.order = MessageOrder_1.getNativeMessageOrder();
            }
            this.nativeMessagingPort.postMessage(message);
        }
    };
    AgentCommunication.prototype.initCommunication = function (manager, webNavigation, onlineConfiguration) {
        if (onlineConfiguration === void 0) { onlineConfiguration = true; }
        this.manager = manager;
        this.webNavigation = webNavigation;
        if (this.nativeMessagingPort !== undefined) {
            console.trace("Existing NMH found, disconnecting from previous NMH.");
            this.nativeMessagingPort.disconnect();
            this.nativeMessagingPort = undefined;
        }
        this.nativeMessagingPort = this.start(onlineConfiguration);
        this.configurationManager.initConfigurationManager(this.manager);
        if (this.wacCommunication.isBrowserChromiumBased(browserInfo_1.browserInfo.name)) { // see DE23408
            this.wacCommunication.activate(this, this.manager.getTabsMonitoring(), this.configurationManager);
        }
        else {
            log_1.getLogger().log("wacCommunication was not activated. Browser name in use: ", browserInfo_1.browserInfo.name);
        }
        if (this.nativeMessagingPort == null && onlineConfiguration) {
            console.trace("Failed connecting to native messaging port");
            return false;
        }
        else {
            log_1.getLogger().info("Succeeded connecting to native messaging port");
            console.trace("Succeeded connecting to native messaging port");
            return true;
        }
    };
    AgentCommunication.prototype.uninitCommunication = function () {
        this.stop();
        this.wacCommunication.deactivate();
    };
    /**
     * Add additional data to the message like extension version and any other information.
     * This should never be trimmed since it is essential.
     */
    AgentCommunication.prototype.addAdditionalData = function (messageData) {
        var eventData = messageData.Data[0];
        eventData.extensionVersion = Consts.EXTENSION_VERSION.getValue();
    };
    AgentCommunication.prototype.addPageInformationProperties = function (tabId, frameId, messageData) {
        if (this.manager == null || this.webNavigation == null) {
            return;
        }
        var tabState = this.manager.getTabsMonitoring().getTabState(tabId);
        var frameState = frameId === 0 ? null : this.webNavigation.getFrame(tabId, frameId);
        var mainFrameState = this.webNavigation.getFrame(tabId, 0);
        var data = messageData.Data[0];
        // Ids
        utils_1.setIfNotExist(data, "tabId", tabId);
        utils_1.setIfNotExist(data, "frameId", frameId);
        utils_1.setIfNotExist(data, "type", FrameType_1.getFrameType(frameId));
        // Properties from main frame state
        if (mainFrameState != null) {
            utils_1.setIfNotExist(data, "documentUrl", mainFrameState.startUrl);
            if (mainFrameState.committedUrl != null) {
                utils_1.setIfNotExist(data, "documentCommittedUrl", mainFrameState.committedUrl);
            }
            if (frameId === 0) {
                // Frame properties
                utils_1.setIfNotExist(data, "frameUrl", mainFrameState.startUrl);
                if (mainFrameState.committedUrl != null) {
                    utils_1.setIfNotExist(data, "frameCommittedUrl", mainFrameState.committedUrl);
                }
            }
        }
        // Properties from tab
        if (tabState != null) {
            utils_1.setIfNotExist(data, "documentTitle", tabState.title);
            utils_1.setIfNotExist(data, "documentCurrentUrl", tabState.currentUrl);
            if (frameId === 0) {
                // Context dependent properties
                utils_1.setIfNotExist(data, "title", tabState.title);
                // Frame properties
                utils_1.setIfNotExist(data, "frameTitle", tabState.title);
                utils_1.setIfNotExist(data, "frameCurrentUrl", tabState.currentUrl);
            }
        }
        // Properties from frame state, only applicable to frames
        if (frameState != null) {
            utils_1.setIfNotExist(data, "frameUrl", frameState.startUrl);
            if (frameState.committedUrl != null) {
                utils_1.setIfNotExist(data, "frameCommittedUrl", frameState.committedUrl);
            }
            utils_1.setIfNotExist(data, "frameCurrentUrl", frameState.currentUrl);
        }
        // Set documentCurrentUrl if wasn't set
        if (mainFrameState != null) {
            utils_1.setIfNotExist(data, "documentCurrentUrl", mainFrameState.currentUrl);
        }
    };
    AgentCommunication.HOST_NAME = "com.aternity.fpi";
    return AgentCommunication;
}());
exports.AgentCommunication = AgentCommunication;


/***/ }),
/* 59 */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Deflate", function() { return Deflate_1$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Inflate", function() { return Inflate_1$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constants", function() { return constants_1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deflate", function() { return deflate_1$2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deflateRaw", function() { return deflateRaw_1$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gzip", function() { return gzip_1$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inflate", function() { return inflate_1$2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inflateRaw", function() { return inflateRaw_1$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ungzip", function() { return ungzip_1; });

/*! pako 2.0.3 https://github.com/nodeca/pako @license (MIT AND Zlib) */
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

/* Public constants ==========================================================*/
/* ===========================================================================*/


//const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
const Z_FIXED               = 4;
//const Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
const Z_BINARY              = 0;
const Z_TEXT                = 1;
//const Z_ASCII             = 1; // = Z_TEXT
const Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES    = 2;
/* The three kinds of block type */

const MIN_MATCH    = 3;
const MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

const LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

const LITERALS      = 256;
/* number of literal bytes 0..255 */

const L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

const D_CODES       = 30;
/* number of distance codes */

const BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

const HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

const MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

const Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

const MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

const END_BLOCK   = 256;
/* end of block literal code */

const REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

const REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

const REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
const extra_lbits =   /* extra bits for each length code */
  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

const extra_dbits =   /* extra bits for each distance code */
  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

const extra_blbits =  /* extra bits for each bit length code */
  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

const bl_order =
  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

const static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

const _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

const _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

const base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

const base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


let static_l_desc;
let static_d_desc;
let static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



const d_code = (dist) => {

  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
const put_short = (s, w) => {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
};


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
const send_bits = (s, value, length) => {

  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
};


const send_code = (s, c, tree) => {

  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
};


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
const bi_reverse = (code, len) => {

  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
const bi_flush = (s) => {

  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
};


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
const gen_bitlen = (s, desc) =>
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  const tree            = desc.dyn_tree;
  const max_code        = desc.max_code;
  const stree           = desc.stat_desc.static_tree;
  const has_stree       = desc.stat_desc.has_stree;
  const extra           = desc.stat_desc.extra_bits;
  const base            = desc.stat_desc.extra_base;
  const max_length      = desc.stat_desc.max_length;
  let h;              /* heap index */
  let n, m;           /* iterate over the tree elements */
  let bits;           /* bit length */
  let xbits;          /* extra bits */
  let f;              /* frequency */
  let overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
};


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
const gen_codes = (tree, max_code, bl_count) =>
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  let code = 0;              /* running code value */
  let bits;                  /* bit index */
  let n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    let len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
};


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
const tr_static_init = () => {

  let n;        /* iterates over tree elements */
  let bits;     /* bit counter */
  let length;   /* length value */
  let code;     /* code value */
  let dist;     /* distance index */
  const bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
};


/* ===========================================================================
 * Initialize a new block.
 */
const init_block = (s) => {

  let n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
};


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
const bi_windup = (s) =>
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
};

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
const copy_block = (s, buf, len, header) =>
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);
  s.pending += len;
};

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
const smaller = (tree, n, m, depth) => {

  const _n2 = n * 2;
  const _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
};

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
const pqdownheap = (s, tree, k) =>
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  const v = s.heap[k];
  let j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
};


// inlined manually
// const SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
const compress_block = (s, ltree, dtree) =>
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  let dist;           /* distance of matched string */
  let lc;             /* match length or unmatched char (if dist == 0) */
  let lx = 0;         /* running index in l_buf */
  let code;           /* the code to send */
  let extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
};


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
const build_tree = (s, desc) =>
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  const tree     = desc.dyn_tree;
  const stree    = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems    = desc.stat_desc.elems;
  let n, m;          /* iterate over heap elements */
  let max_code = -1; /* largest code with non zero frequency */
  let node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
};


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
const scan_tree = (s, tree, max_code) =>
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
const send_tree = (s, tree, max_code) =>
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
const build_bl_tree = (s) => {

  let max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
};


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
const send_all_trees = (s, lcodes, dcodes, blcodes) =>
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  let rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
const detect_data_type = (s) => {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  let black_mask = 0xf3ffc07f;
  let n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
};


let static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
const _tr_init = (s) =>
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
};


/* ===========================================================================
 * Send a stored block
 */
const _tr_stored_block = (s, buf, stored_len, last) =>
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
};


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
const _tr_align = (s) => {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
};


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
const _tr_flush_block = (s, buf, stored_len, last) =>
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  let max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
};

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
const _tr_tally = (s, dist, lc) =>
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //let out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
};

var _tr_init_1  = _tr_init;
var _tr_stored_block_1 = _tr_stored_block;
var _tr_flush_block_1  = _tr_flush_block;
var _tr_tally_1 = _tr_tally;
var _tr_align_1 = _tr_align;

var trees = {
	_tr_init: _tr_init_1,
	_tr_stored_block: _tr_stored_block_1,
	_tr_flush_block: _tr_flush_block_1,
	_tr_tally: _tr_tally_1,
	_tr_align: _tr_align_1
};

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const adler32 = (adler, buf, len, pos) => {
  let s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
};


var adler32_1 = adler32;

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
const makeTable = () => {
  let c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
};

// Create table on load. Just 255 signed longs. Not a problem.
const crcTable = new Uint32Array(makeTable());


const crc32 = (crc, buf, len, pos) => {
  const t = crcTable;
  const end = pos + len;

  crc ^= -1;

  for (let i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
};


var crc32_1 = crc32;

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var messages = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var constants = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  Z_MEM_ERROR:       -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const { _tr_init: _tr_init$1, _tr_stored_block: _tr_stored_block$1, _tr_flush_block: _tr_flush_block$1, _tr_tally: _tr_tally$1, _tr_align: _tr_align$1 } = trees;




/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,
  Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,
  Z_DEFAULT_COMPRESSION,
  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED: Z_FIXED$1, Z_DEFAULT_STRATEGY,
  Z_UNKNOWN: Z_UNKNOWN$1,
  Z_DEFLATED
} = constants;

/*============================================================================*/


const MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
const MAX_WBITS = 15;
/* 32K LZ77 window */
const DEF_MEM_LEVEL = 8;


const LENGTH_CODES$1  = 29;
/* number of length codes, not counting the special END_BLOCK code */
const LITERALS$1      = 256;
/* number of literal bytes 0..255 */
const L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
/* number of Literal or Length codes, including the END_BLOCK code */
const D_CODES$1       = 30;
/* number of distance codes */
const BL_CODES$1      = 19;
/* number of codes used to transfer the bit lengths */
const HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
/* maximum heap size */
const MAX_BITS$1  = 15;
/* All codes must not exceed MAX_BITS bits */

const MIN_MATCH$1 = 3;
const MAX_MATCH$1 = 258;
const MIN_LOOKAHEAD = (MAX_MATCH$1 + MIN_MATCH$1 + 1);

const PRESET_DICT = 0x20;

const INIT_STATE = 42;
const EXTRA_STATE = 69;
const NAME_STATE = 73;
const COMMENT_STATE = 91;
const HCRC_STATE = 103;
const BUSY_STATE = 113;
const FINISH_STATE = 666;

const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
const BS_BLOCK_DONE     = 2; /* block flush performed */
const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

const err = (strm, errorCode) => {
  strm.msg = messages[errorCode];
  return errorCode;
};

const rank = (f) => {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
};

const zero$1 = (buf) => {
  let len = buf.length; while (--len >= 0) { buf[len] = 0; }
};


/* eslint-disable new-cap */
let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let HASH = HASH_ZLIB;

/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
const flush_pending = (strm) => {
  const s = strm.state;

  //_tr_flush_bits(s);
  let len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
};


const flush_block_only = (s, last) => {
  _tr_flush_block$1(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
};


const put_byte = (s, b) => {
  s.pending_buf[s.pending++] = b;
};


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
const putShortMSB = (s, b) => {

  //  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
};


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
const read_buf = (strm, buf, start, size) => {

  let len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_1(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32_1(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
};


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
const longest_match = (s, cur_match) => {

  let chain_length = s.max_chain_length;      /* max hash chain length */
  let scan = s.strstart; /* current string */
  let match;                       /* matched string */
  let len;                           /* length of current match */
  let best_len = s.prev_length;              /* best match length so far */
  let nice_match = s.nice_match;             /* stop if match long enough */
  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  const _win = s.window; // shortcut

  const wmask = s.w_mask;
  const prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  const strend = s.strstart + MAX_MATCH$1;
  let scan_end1  = _win[scan + best_len - 1];
  let scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH$1 - (strend - scan);
    scan = strend - MAX_MATCH$1;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
};


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
const fill_window = (s) => {

  const _w_size = s.w_size;
  let p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;

      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;

      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH$1) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH$1 - 1]);

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH$1) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
const deflate_stored = (s, flush) => {

  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  let max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    const max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
};

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
const deflate_fast = (s, flush) => {

  let hash_head;        /* head of the hash chain */
  let bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH$1) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH$1) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally$1(s, s.strstart - s.match_start, s.match_length - MIN_MATCH$1);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH$1) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally$1(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH$1 - 1)) ? s.strstart : MIN_MATCH$1 - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
const deflate_slow = (s, flush) => {

  let hash_head;          /* head of hash chain */
  let bflush;              /* set if current block must be flushed */

  let max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH$1) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH$1 - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH$1 && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH$1 - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH$1 && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH$1;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = _tr_tally$1(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH$1);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH$1 - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH$1 - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally$1(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = _tr_tally$1(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH$1 - 1 ? s.strstart : MIN_MATCH$1 - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
};


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
const deflate_rle = (s, flush) => {

  let bflush;            /* set if current block must be flushed */
  let prev;              /* byte at distance one to match */
  let scan, strend;      /* scan goes up to strend for length of run */

  const _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH$1) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH$1 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH$1 && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH$1;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH$1 - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH$1) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally$1(s, 1, s.match_length - MIN_MATCH$1);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally$1(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
const deflate_huff = (s, flush) => {

  let bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = _tr_tally$1(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {

  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

const configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
const lm_init = (s) => {

  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero$1(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH$1 - 1;
  s.match_available = 0;
  s.ins_h = 0;
};


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new Uint16Array(HEAP_SIZE$1 * 2);
  this.dyn_dtree  = new Uint16Array((2 * D_CODES$1 + 1) * 2);
  this.bl_tree    = new Uint16Array((2 * BL_CODES$1 + 1) * 2);
  zero$1(this.dyn_ltree);
  zero$1(this.dyn_dtree);
  zero$1(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new Uint16Array(MAX_BITS$1 + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new Uint16Array(2 * L_CODES$1 + 1);  /* heap used to build the Huffman trees */
  zero$1(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new Uint16Array(2 * L_CODES$1 + 1); //uch depth[2*L_CODES+1];
  zero$1(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


const deflateResetKeep = (strm) => {

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN$1;

  const s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  _tr_init$1(s);
  return Z_OK;
};


const deflateReset = (strm) => {

  const ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
};


const deflateSetHeader = (strm, head) => {

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
};


const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  let wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED$1) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  const s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH$1 - 1) / MIN_MATCH$1);

  s.window = new Uint8Array(s.w_size * 2);
  s.head = new Uint16Array(s.hash_size);
  s.prev = new Uint16Array(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new Uint8Array(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
};

const deflateInit = (strm, level) => {

  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
};


const deflate = (strm, flush) => {

  let beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  const s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  const old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      let level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align$1(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        _tr_stored_block$1(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero$1(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
};


const deflateEnd = (strm) => {

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  const status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
};


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
const deflateSetDictionary = (strm, dictionary) => {

  let dictLength = dictionary.length;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  const s = strm.state;
  const wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero$1(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    let tmpDict = new Uint8Array(s.w_size);
    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH$1) {
    let str = s.strstart;
    let n = s.lookahead - (MIN_MATCH$1 - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH$1 - 1]);

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH$1 - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH$1 - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
};


var deflateInit_1 = deflateInit;
var deflateInit2_1 = deflateInit2;
var deflateReset_1 = deflateReset;
var deflateResetKeep_1 = deflateResetKeep;
var deflateSetHeader_1 = deflateSetHeader;
var deflate_2 = deflate;
var deflateEnd_1 = deflateEnd;
var deflateSetDictionary_1 = deflateSetDictionary;
var deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/

var deflate_1 = {
	deflateInit: deflateInit_1,
	deflateInit2: deflateInit2_1,
	deflateReset: deflateReset_1,
	deflateResetKeep: deflateResetKeep_1,
	deflateSetHeader: deflateSetHeader_1,
	deflate: deflate_2,
	deflateEnd: deflateEnd_1,
	deflateSetDictionary: deflateSetDictionary_1,
	deflateInfo: deflateInfo
};

const _has = (obj, key) => {
  return Object.prototype.hasOwnProperty.call(obj, key);
};

var assign = function (obj /*from1, from2, from3, ...*/) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (const p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// Join array of chunks to single array.
var flattenChunks = (chunks) => {
  // calculate data length
  let len = 0;

  for (let i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }

  // join chunks
  const result = new Uint8Array(len);

  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
    let chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }

  return result;
};

var common = {
	assign: assign,
	flattenChunks: flattenChunks
};

// String encode/decode helpers


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const _utf8len = new Uint8Array(256);
for (let q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
var string2buf = (str) => {
  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new Uint8Array(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper
const buf2binstring = (buf, len) => {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }

  let result = '';
  for (let i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
};


// convert array to string
var buf2string = (buf, max) => {
  let i, out;
  const len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  const utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    let c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    let c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = (buf, max) => {

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  let pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

var strings = {
	string2buf: string2buf,
	buf2string: buf2string,
	utf8border: utf8border
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

var zstream = ZStream;

const toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$1,
  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1,
  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
  Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
  Z_DEFLATED: Z_DEFLATED$1
} = constants;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  this.options = common.assign({
    level: Z_DEFAULT_COMPRESSION$1,
    method: Z_DEFLATED$1,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY$1
  }, options || {});

  let opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new zstream();
  this.strm.avail_out = 0;

  let status = deflate_1.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK$1) {
    throw new Error(messages[status]);
  }

  if (opt.header) {
    deflate_1.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    let dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = deflate_1.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK$1) {
      throw new Error(messages[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;

  if (this.ended) { return false; }

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH$1 : Z_NO_FLUSH$1;

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    // Make sure avail_out > 6 to avoid repeating markers
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH$1) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    status = deflate_1.deflate(strm, _flush_mode);

    // Ended => flush and finish
    if (status === Z_STREAM_END$1) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = deflate_1.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK$1;
    }

    // Flush if out buffer full
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }

    // Flush if requested and has data
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK$1) {
    this.result = common.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array
 * - data (Uint8Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate$1(input, options) {
  const deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array
 * - data (Uint8Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate$1(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array
 * - data (Uint8Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate$1(input, options);
}


var Deflate_1 = Deflate;
var deflate_2$1 = deflate$1;
var deflateRaw_1 = deflateRaw;
var gzip_1 = gzip;
var constants$1 = constants;

var deflate_1$1 = {
	Deflate: Deflate_1,
	deflate: deflate_2$1,
	deflateRaw: deflateRaw_1,
	gzip: gzip_1,
	constants: constants$1
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
const BAD = 30;       /* got a data error -- remain here until reset */
const TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
var inffast = function inflate_fast(strm, start) {
  let _in;                    /* local strm.input */
  let last;                   /* have enough input while in < last */
  let _out;                   /* local strm.output */
  let beg;                    /* inflate()'s initial strm.output */
  let end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  let dmax;                   /* maximum distance from zlib header */
//#endif
  let wsize;                  /* window size or zero if not using window */
  let whave;                  /* valid bytes in the window */
  let wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  let s_window;               /* allocated sliding window, if wsize != 0 */
  let hold;                   /* local strm.hold */
  let bits;                   /* local strm.bits */
  let lcode;                  /* local strm.lencode */
  let dcode;                  /* local strm.distcode */
  let lmask;                  /* mask for first level of length codes */
  let dmask;                  /* mask for first level of distance codes */
  let here;                   /* retrieved table entry */
  let op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  let len;                    /* match length, unused bytes */
  let dist;                   /* match distance */
  let from;                   /* where to copy match from */
  let from_source;


  let input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  const state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const MAXBITS = 15;
const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

const CODES = 0;
const LENS = 1;
const DISTS = 2;

const lbase = new Uint16Array([ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
]);

const lext = new Uint8Array([ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
]);

const dbase = new Uint16Array([ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
]);

const dext = new Uint8Array([ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
]);

const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
{
  const bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  let len = 0;               /* a code's length in bits */
  let sym = 0;               /* index of code symbols */
  let min = 0, max = 0;          /* minimum and maximum code lengths */
  let root = 0;              /* number of index bits for root table */
  let curr = 0;              /* number of index bits for current table */
  let drop = 0;              /* code bits to drop for sub-table */
  let left = 0;                   /* number of prefix codes available */
  let used = 0;              /* code entries in table used */
  let huff = 0;              /* Huffman code */
  let incr;              /* for incrementing code, index */
  let fill;              /* index for replicating entries */
  let low;               /* low bits for current root entry */
  let mask;              /* mask for low root bits */
  let next;             /* next available space in table */
  let base = null;     /* base value table to use */
  let base_index = 0;
//  let shoextra;    /* extra bits table to use */
  let end;                    /* use base and extra for symbol > end */
  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  let extra = null;
  let extra_index = 0;

  let here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


var inftrees = inflate_table;

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.






const CODES$1 = 0;
const LENS$1 = 1;
const DISTS$1 = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_FINISH: Z_FINISH$2, Z_BLOCK: Z_BLOCK$1, Z_TREES,
  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2, Z_NEED_DICT, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR, Z_BUF_ERROR: Z_BUF_ERROR$1,
  Z_DEFLATED: Z_DEFLATED$2
} = constants;


/* STATES ====================================================================*/
/* ===========================================================================*/


const    HEAD = 1;       /* i: waiting for magic header */
const    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
const    TIME = 3;       /* i: waiting for modification time (gzip) */
const    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
const    EXLEN = 5;      /* i: waiting for extra length (gzip) */
const    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
const    NAME = 7;       /* i: waiting for end of file name (gzip) */
const    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
const    HCRC = 9;       /* i: waiting for header crc (gzip) */
const    DICTID = 10;    /* i: waiting for dictionary check value */
const    DICT = 11;      /* waiting for inflateSetDictionary() call */
const        TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */
const        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
const        STORED = 14;    /* i: waiting for stored size (length and complement) */
const        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
const        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
const        TABLE = 17;     /* i: waiting for dynamic block table lengths */
const        LENLENS = 18;   /* i: waiting for code length code lengths */
const        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
const            LEN_ = 20;      /* i: same as LEN below, but only first time in */
const            LEN = 21;       /* i: waiting for length/lit/eob code */
const            LENEXT = 22;    /* i: waiting for length extra bits */
const            DIST = 23;      /* i: waiting for distance code */
const            DISTEXT = 24;   /* i: waiting for distance extra bits */
const            MATCH = 25;     /* o: waiting for output space to copy string */
const            LIT = 26;       /* o: waiting for output space to write literal */
const    CHECK = 27;     /* i: waiting for 32-bit check value */
const    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
const    DONE = 29;      /* finished check, done -- remain here until reset */
const    BAD$1 = 30;       /* got a data error -- remain here until reset */
const    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
const    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



const ENOUGH_LENS$1 = 852;
const ENOUGH_DISTS$1 = 592;
//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

const MAX_WBITS$1 = 15;
/* 32K LZ77 window */
const DEF_WBITS = MAX_WBITS$1;


const zswap32 = (q) => {

  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
};


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new Uint16Array(320); /* temporary storage for code lengths */
  this.work = new Uint16Array(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}


const inflateResetKeep = (strm) => {

  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS$1);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS$1);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK$2;
};


const inflateReset = (strm) => {

  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

};


const inflateReset2 = (strm, windowBits) => {
  let wrap;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
  const state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR$1;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
};


const inflateInit2 = (strm, windowBits) => {

  if (!strm) { return Z_STREAM_ERROR$1; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  const state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  const ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK$2) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
};


const inflateInit = (strm) => {

  return inflateInit2(strm, DEF_WBITS);
};


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
let virgin = true;

let lenfix, distfix; // We have no pointers in JS, so keep tables separate


const fixedtables = (state) => {

  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);

    /* literal/length table */
    let sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inftrees(LENS$1,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inftrees(DISTS$1, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
};


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
const updatewindow = (strm, src, end, copy) => {

  let dist;
  const state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new Uint8Array(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    state.window.set(src.subarray(end - state.wsize, end), 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      state.window.set(src.subarray(end - copy, end), 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
};


const inflate = (strm, flush) => {

  let state;
  let input, output;          // input/output buffers
  let next;                   /* next input INDEX */
  let put;                    /* next output INDEX */
  let have, left;             /* available input and output */
  let hold;                   /* bit buffer */
  let bits;                   /* bits in bit buffer */
  let _in, _out;              /* save starting available input and output */
  let copy;                   /* number of stored or match bytes to copy */
  let from;                   /* where to copy match bytes from */
  let from_source;
  let here = 0;               /* current decoding table entry */
  let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //let last;                   /* parent table entry */
  let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  let len;                    /* length to copy for repeats, bits to drop */
  let ret;                    /* return code */
  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
  let opts;

  let n; // temporary variable for NEED_BITS

  const order = /* permutation of code lengths */
    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR$1;
  }

  state = strm.state;
  if (state.mode === TYPE$1) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK$2;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;           /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD$1;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED$2) {
          strm.msg = 'unknown compression method';
          state.mode = BAD$1;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD$1;
          break;
        }

        // !!! pako patch. Force use `options.windowBits` if passed.
        // Required to always use max window size by default.
        state.dmax = 1 << state.wbits;
        //state.dmax = 1 << len;

        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE$1;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED$2) {
          strm.msg = 'unknown compression method';
          state.mode = BAD$1;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD$1;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32_1(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Uint8Array(state.head.extra_len);
              }
              state.head.extra.set(
                input.subarray(
                  next,
                  // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  next + copy
                ),
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32_1(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32_1(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD$1;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE$1;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE$1;
        /* falls through */
      case TYPE$1:
        if (flush === Z_BLOCK$1 || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD$1;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD$1;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          output.set(input.subarray(next, next + copy), put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE$1;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD$1;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inftrees(CODES$1, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD$1;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD$1;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD$1;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD$1) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD$1;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inftrees(LENS$1, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD$1;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inftrees(DISTS$1, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD$1;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inffast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE$1) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE$1;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD$1;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD$1;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD$1;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD$1;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                /*UPDATE(state.check, put - _out, _out);*/
                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD$1;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD$1;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END$2;
        break inf_leave;
      case BAD$1:
        ret = Z_DATA_ERROR$1;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR$1;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD$1 &&
                      (state.mode < CHECK || flush !== Z_FINISH$2))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE$1 ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH$2) && ret === Z_OK$2) {
    ret = Z_BUF_ERROR$1;
  }
  return ret;
};


const inflateEnd = (strm) => {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR$1;
  }

  let state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK$2;
};


const inflateGetHeader = (strm, head) => {

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK$2;
};


const inflateSetDictionary = (strm, dictionary) => {
  const dictLength = dictionary.length;

  let state;
  let dictid;
  let ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR$1; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR$1;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32_1(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR$1;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK$2;
};


var inflateReset_1 = inflateReset;
var inflateReset2_1 = inflateReset2;
var inflateResetKeep_1 = inflateResetKeep;
var inflateInit_1 = inflateInit;
var inflateInit2_1 = inflateInit2;
var inflate_2 = inflate;
var inflateEnd_1 = inflateEnd;
var inflateGetHeader_1 = inflateGetHeader;
var inflateSetDictionary_1 = inflateSetDictionary;
var inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
module.exports.inflateCopy = inflateCopy;
module.exports.inflateGetDictionary = inflateGetDictionary;
module.exports.inflateMark = inflateMark;
module.exports.inflatePrime = inflatePrime;
module.exports.inflateSync = inflateSync;
module.exports.inflateSyncPoint = inflateSyncPoint;
module.exports.inflateUndermine = inflateUndermine;
*/

var inflate_1 = {
	inflateReset: inflateReset_1,
	inflateReset2: inflateReset2_1,
	inflateResetKeep: inflateResetKeep_1,
	inflateInit: inflateInit_1,
	inflateInit2: inflateInit2_1,
	inflate: inflate_2,
	inflateEnd: inflateEnd_1,
	inflateGetHeader: inflateGetHeader_1,
	inflateSetDictionary: inflateSetDictionary_1,
	inflateInfo: inflateInfo
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

var gzheader = GZheader;

const toString$1 = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_FINISH: Z_FINISH$3,
  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_MEM_ERROR: Z_MEM_ERROR$1
} = constants;

/* ===========================================================================*/


/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  this.options = common.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ''
  }, options || {});

  const opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new zstream();
  this.strm.avail_out = 0;

  let status  = inflate_1.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== Z_OK$3) {
    throw new Error(messages[status]);
  }

  this.header = new gzheader();

  inflate_1.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = inflate_1.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== Z_OK$3) {
        throw new Error(messages[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer): input data
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
 *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
 *   `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. If end of stream detected,
 * [[Inflate#onEnd]] will be called.
 *
 * `flush_mode` is not needed for normal operation, because end of stream
 * detected automatically. You may try to use it for advanced things, but
 * this functionality was not tested.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  const dictionary = this.options.dictionary;
  let status, _flush_mode, last_avail_out;

  if (this.ended) return false;

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH$3 : Z_NO_FLUSH$2;

  // Convert data if needed
  if (toString$1.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = inflate_1.inflate(strm, _flush_mode);

    if (status === Z_NEED_DICT$1 && dictionary) {
      status = inflate_1.inflateSetDictionary(strm, dictionary);

      if (status === Z_OK$3) {
        status = inflate_1.inflate(strm, _flush_mode);
      } else if (status === Z_DATA_ERROR$2) {
        // Replace code with more verbose
        status = Z_NEED_DICT$1;
      }
    }

    // Skip snyc markers if more data follows and not raw mode
    while (strm.avail_in > 0 &&
           status === Z_STREAM_END$3 &&
           strm.state.wrap > 0 &&
           data[strm.next_in] !== 0)
    {
      inflate_1.inflateReset(strm);
      status = inflate_1.inflate(strm, _flush_mode);
    }

    switch (status) {
      case Z_STREAM_ERROR$2:
      case Z_DATA_ERROR$2:
      case Z_NEED_DICT$1:
      case Z_MEM_ERROR$1:
        this.onEnd(status);
        this.ended = true;
        return false;
    }

    // Remember real `avail_out` value, because we may patch out buffer content
    // to align utf8 strings boundaries.
    last_avail_out = strm.avail_out;

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END$3) {

        if (this.options.to === 'string') {

          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          let tail = strm.next_out - next_out_utf8;
          let utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail & realign counters
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

          this.onData(utf8str);

        } else {
          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
        }
      }
    }

    // Must repeat iteration if out buffer is full
    if (status === Z_OK$3 && last_avail_out === 0) continue;

    // Finalize if end of stream reached.
    if (status === Z_STREAM_END$3) {
      status = inflate_1.inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return true;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|String): output data. When string output requested,
 *   each chunk will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK$3) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = common.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|String
 * - data (Uint8Array): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako');
 * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
 * let output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate$1(input, options) {
  const inflator = new Inflate(options);

  inflator.push(input);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) throw inflator.msg || messages[inflator.err];

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|String
 * - data (Uint8Array): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate$1(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|String
 * - data (Uint8Array): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


var Inflate_1 = Inflate;
var inflate_2$1 = inflate$1;
var inflateRaw_1 = inflateRaw;
var ungzip = inflate$1;
var constants$2 = constants;

var inflate_1$1 = {
	Inflate: Inflate_1,
	inflate: inflate_2$1,
	inflateRaw: inflateRaw_1,
	ungzip: ungzip,
	constants: constants$2
};

const { Deflate: Deflate$1, deflate: deflate$2, deflateRaw: deflateRaw$1, gzip: gzip$1 } = deflate_1$1;

const { Inflate: Inflate$1, inflate: inflate$2, inflateRaw: inflateRaw$1, ungzip: ungzip$1 } = inflate_1$1;



var Deflate_1$1 = Deflate$1;
var deflate_1$2 = deflate$2;
var deflateRaw_1$1 = deflateRaw$1;
var gzip_1$1 = gzip$1;
var Inflate_1$1 = Inflate$1;
var inflate_1$2 = inflate$2;
var inflateRaw_1$1 = inflateRaw$1;
var ungzip_1 = ungzip$1;
var constants_1 = constants;

var pako = {
	Deflate: Deflate_1$1,
	deflate: deflate_1$2,
	deflateRaw: deflateRaw_1$1,
	gzip: gzip_1$1,
	Inflate: Inflate_1$1,
	inflate: inflate_1$2,
	inflateRaw: inflateRaw_1$1,
	ungzip: ungzip_1,
	constants: constants_1
};

/* harmony default export */ __webpack_exports__["default"] = (pako);



/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var log_2 = __webpack_require__(1);
var EventNames = __webpack_require__(10);
var WebRequest_1 = __webpack_require__(32);
var IdleMonitoring = __webpack_require__(34);
var WindowsMonitoring = __webpack_require__(35);
var DownloadsMonitoring = __webpack_require__(22);
var timeProvider_1 = __webpack_require__(3);
var ConfigurationData_1 = __webpack_require__(9);
var WebNavigationReporter_1 = __webpack_require__(62);
var Configuration_1 = __webpack_require__(12);
var MessageProcessor_1 = __webpack_require__(63);
/**
 * Manages all subscriptions
 */
var BackgroundManager = /** @class */ (function () {
    function BackgroundManager(communication, configurationManager, tabsMonitoring, webRequest, webNavigation, windowsMonitoring, idleMonitoring, htmlEventsMonitoring, wacCommunication, downloadsMonitoring) {
        this.communication = communication;
        this.configurationManager = configurationManager;
        this.tabsMonitoring = tabsMonitoring;
        this.webRequest = webRequest;
        this.webNavigation = webNavigation;
        this.windowsMonitoring = windowsMonitoring;
        this.idleMonitoring = idleMonitoring;
        this.htmlEventsMonitoring = htmlEventsMonitoring;
        this.wacCommunication = wacCommunication;
        this.downloadsMonitoring = downloadsMonitoring;
        this.active = false;
        this.isConnectionTimeoutActive = false;
        this.timeoutId = null;
        this.webNavigationReporter = new WebNavigationReporter_1.WebNavigationReporter(communication);
        log_2.enableLogs();
        this.connectToPort();
    }
    BackgroundManager.prototype.getTabsMonitoring = function () {
        return this.tabsMonitoring;
    };
    BackgroundManager.prototype.getMessageProcessor = function () {
        return this.messageProcessor;
    };
    BackgroundManager.prototype.scheduleConnectAttempt = function () {
        var _this = this;
        if (this.isConnectionTimeoutActive) {
            log_1.getLogger().error("There is already a connection attempt.");
        }
        else {
            this.isConnectionTimeoutActive = true;
            var retryConnectMs = 60 * 1000;
            var dateObjWithOffset = new Date(timeProvider_1.timeProvider.now() + retryConnectMs);
            log_1.getLogger().info("Scheduling another connection attempt on " + dateObjWithOffset + ".");
            if (this.timeoutId === null) {
                this.timeoutId = setTimeout(function () {
                    _this.isConnectionTimeoutActive = false;
                    _this.connectToPort();
                    _this.timeoutId = null;
                }, retryConnectMs);
            }
        }
    };
    BackgroundManager.prototype.connectToPort = function () {
        if (this.isConnectionTimeoutActive) {
            log_1.getLogger().error("it isn't allowed to try to connect");
        }
        else {
            log_1.getLogger().info("Trying to connect....");
            if (!this.communication.initCommunication(this, this.webNavigation)) {
                log_1.getLogger().warn("Failed");
                this.scheduleConnectAttempt();
            }
            else {
                log_1.getLogger().info("Success");
            }
        }
    };
    BackgroundManager.prototype.activate = function (configuration) {
        if (this.active) {
            return;
        }
        log_1.getLogger().log("Activating");
        this.active = true;
        this.messageProcessor = new MessageProcessor_1.MessageProcessor(configuration);
        this.webNavigation.subscribe(this.webNavigationReporter.onWebNavigation);
        this.webNavigation.subscribe(this.wacCommunication.onWebNavigation);
        // HTML events monitoring
        var hasHtmlEventsMonitoring = configuration.isMonitoring(EventNames.HTML_DESIGNER_EVENT_NAMESPACE) ||
            configuration.isMonitoring(EventNames.HTML_ONAPP_EVENT_NAMESPACE) ||
            configuration.isMonitoring(EventNames.DOM_EVENT_NAMESPACE);
        var hasWebRequestMonitoring = hasHtmlEventsMonitoring ||
            configuration.hasWpmFilter() ||
            configuration.isMonitoring(WebRequest_1.WEB_REQUEST_EVENT_NAMESPACE);
        this.tabsMonitoring.initTabsMonitoring(this, this.communication, this.webRequest, this.webNavigation);
        if (hasWebRequestMonitoring) {
            this.webRequest.initWebRequest(this, this.communication, this.tabsMonitoring, this.configurationManager.getConfiguration());
        }
        if (configuration.isMonitoring(WindowsMonitoring.WINDOW_EVENT_NAMESPACE)) {
            this.windowsMonitoring.initWindowsMonitoring(this, this.communication);
        }
        if (configuration.isMonitoring(IdleMonitoring.IDLE_EVENT_NAMESPACE)) {
            this.idleMonitoring.initIdleMonitoring(this, this.communication);
        }
        if (configuration.isMonitoring(DownloadsMonitoring.DOWNLOADS_EVENT_NAMESPACE)) {
            if (typeof chrome.downloads === "object") {
                this.downloadsMonitoring.initDownloadsMonitoring(this, this.communication);
            }
        }
        if (hasHtmlEventsMonitoring) {
            this.htmlEventsMonitoring.initEventsMonitoring(this.tabsMonitoring);
        }
    };
    BackgroundManager.prototype.deactivate = function () {
        if (!this.active) {
            return;
        }
        log_1.getLogger().log("Deactivating");
        this.webNavigation.unsubscribe(this.webNavigationReporter.onWebNavigation);
        this.active = false;
        // Deactivate all
        this.tabsMonitoring.uninitTabsMonitoring();
        this.webRequest.uninitWebRequest();
        this.windowsMonitoring.uninitWindowsMonitoring();
        this.idleMonitoring.uninitIdleMonitoring();
        this.htmlEventsMonitoring.uninitEventsMonitoring();
        this.downloadsMonitoring.uninitDownloadsMonitoring();
    };
    BackgroundManager.prototype.reportEverything = function () {
        this.changeConfiguration(ConfigurationData_1.REPORT_EVERYTHING_CONFIGURATION);
    };
    BackgroundManager.prototype.reportAllWpm = function () {
        this.changeConfiguration(ConfigurationData_1.REPORT_WPM_CONFIGURATION);
    };
    BackgroundManager.prototype.reportNothing = function () {
        this.deactivate();
    };
    BackgroundManager.prototype.changeConfiguration = function (configData) {
        this.deactivate();
        this.isConnectionTimeoutActive = false;
        if (this.timeoutId !== null) {
            clearTimeout(this.timeoutId);
            this.timeoutId = null;
        }
        var configuration = new Configuration_1.Configuration(configData);
        this.activate(configuration);
        this.communication.initCommunication(this, this.webNavigation, false);
    };
    return BackgroundManager;
}());
exports.BackgroundManager = BackgroundManager;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var WebRequestEvent_1 = __webpack_require__(33);
var WebRequestState = /** @class */ (function () {
    function WebRequestState(requestStartTime) {
        /**
         * True when beforeRequestEvent member is set.
         */
        this.setBeforeRequestEvent = false;
        /**
         * True when Start event has been posted.
         */
        this.postedStart = false;
        this.totalIncomingBytes = 0;
        this.totalOutgoingBytes = 0;
        /**
         * Used to get the "server time" that is the time between sending headers and receiving the server response.
         */
        this.totalServerTime = 0;
        /**
         * Used to remember the last timestamp that we went through OnSendHeaders.
         */
        this.lastOnSendHeadersTs = 0;
        /**
         * Stored event times.
         */
        this.eventTimes = {};
        /**
         * Indicates request came with AppInternals header.
         */
        this.appInternalsMonitoring = false;
        this.requestStartTime = requestStartTime;
    }
    /**
     * Stores event time for the given event
     *
     * @param requestEvent Request event name.
     * @param eventTime Time of this event.
     */
    WebRequestState.prototype.storeEventTime = function (requestEvent, eventTime) {
        var duration = 10 * (eventTime - this.requestStartTime);
        duration = Math.floor(duration) / 10;
        var requestEventStr = WebRequestEvent_1.WebRequestEvent[requestEvent];
        if (!(requestEventStr in this.eventTimes)) {
            this.eventTimes[requestEventStr] = [];
        }
        this.eventTimes[requestEventStr].push(duration);
    };
    return WebRequestState;
}());
exports.WebRequestState = WebRequestState;
var WebRequestsStates = /** @class */ (function () {
    function WebRequestsStates() {
        this.requests = {};
    }
    WebRequestsStates.prototype.add = function (requestId, timeStamp) {
        log_1.getLogger().debug("Adding request", requestId);
        return this.requests[requestId] = new WebRequestState(timeStamp);
    };
    WebRequestsStates.prototype.get = function (requestId) {
        return this.requests[requestId];
    };
    WebRequestsStates.prototype.remove = function (requestId) {
        log_1.getLogger().debug("Removing request", requestId);
        delete this.requests[requestId];
    };
    WebRequestsStates.prototype.clear = function () {
        this.requests = {};
    };
    return WebRequestsStates;
}());
exports.WebRequestsStates = WebRequestsStates;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var FrameType_1 = __webpack_require__(11);
var MessagingModel_1 = __webpack_require__(2);
var utils_1 = __webpack_require__(0);
exports.WEB_NAVIGATION_EVENT_NAMESPACE = "html:chrome:WebNavigation";
function makeEventName(event) {
    return exports.WEB_NAVIGATION_EVENT_NAMESPACE + "." + event;
}
/**
 * Reports WebNavigation events to Agent.
 */
var WebNavigationReporter = /** @class */ (function () {
    function WebNavigationReporter(communication) {
        var _this = this;
        this.communication = communication;
        this.onWebNavigation = function (event, details, frameState, tabState) {
            var message = new MessagingModel_1.OutgoingEventMessage(makeEventName(event), details.timeStamp);
            var eventData = message.messageData.Data[0];
            var detailsRecord = details;
            // Copy all properties
            for (var prop in details) {
                if (details.hasOwnProperty(prop)) {
                    var propValue = detailsRecord[prop];
                    if (utils_1.isSerializablePrimitive(propValue)) {
                        eventData[prop] = propValue;
                    }
                    else {
                        // Array has special treatment
                        if (Array.isArray(propValue)) {
                            // tslint:disable-next-line no-unsafe-any
                            for (var _i = 0, propValue_1 = propValue; _i < propValue_1.length; _i++) {
                                var item = propValue_1[_i];
                                eventData[prop + "." + item] = "true";
                            }
                        }
                    }
                }
            }
            // Add urls
            if (frameState != null) {
                eventData.frameUrl = frameState.startUrl;
                eventData.frameCurrentUrl = frameState.currentUrl;
                if (frameState.committedUrl != null) {
                    eventData.frameCommittedUrl = frameState.committedUrl;
                }
                eventData.type = FrameType_1.getFrameType(frameState.frameId);
            }
            if (tabState != null) {
                eventData.documentUrl = tabState.startUrl;
                eventData.documentCurrentUrl = tabState.currentUrl;
                if (tabState.committedUrl != null) {
                    eventData.documentCommittedUrl = tabState.committedUrl;
                }
            }
            // Get type using details if was not set.
            if (event !== "CreateNavigationTarget" && eventData.type == null) {
                // ReSharper disable once SuspiciousTypeofCheck
                // tslint:disable-next-line no-any no-unnecessary-type-assertion
                var frameId = detailsRecord["frameId"];
                if (typeof frameId === "number") {
                    eventData.type = FrameType_1.getFrameType(frameId);
                }
                else {
                    log_1.getLogger().warn("Neither frameState nor details has frame identifier");
                }
            }
            _this.communication.postNativeMessage(message);
        };
    }
    return WebNavigationReporter;
}());
exports.WebNavigationReporter = WebNavigationReporter;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Consts = __webpack_require__(4);
var log_1 = __webpack_require__(1);
var Utils = __webpack_require__(0);
var lazy_1 = __webpack_require__(5);
var MessageProcessor = /** @class */ (function () {
    function MessageProcessor(configuration) {
        this.configuration = configuration;
    }
    /*
     * @return true if event is in the event filters list and it has all required properties
     * for this event.
     */
    MessageProcessor.prototype.isEventMonitored = function (message) {
        var _this = this;
        // Validate message and event
        if (message.Data == null ||
            message.Data[0] == null ||
            !this.configuration.hasEventFilter(message.EventType)) {
            return false;
        }
        // WebRequest required properties
        if (Consts.WEBREQUEST_EVENT_RE.test(message.EventType)) {
            var data_1 = message.Data[0];
            if (!Consts.WEBREQUEST_REQUIRED_PROPERTIES.some(function (properties) { return properties.every(function (p) { return _this.isMatchEvent(message.EventType, p, data_1[p]); }); })) {
                return false;
            }
        }
        return true;
    };
    /**
     * Call isMatchEvent with check for null or undefined.
     */
    MessageProcessor.prototype.isMatchEvent = function (eventName, propertyName, input) {
        if (input == null)
            return false;
        return this.configuration.isMatchEvent(eventName, propertyName, 
        // tslint:disable-next-line no-unsafe-any
        input.toString());
    };
    /**
     * @return Whether property is not truncated.
     */
    MessageProcessor.prototype.isNonTruncated = function (name) {
        // All aternity properties are not truncated.
        return Utils.startsWith(name, "aternity");
    };
    /**
     * Convert and filter array values.
     * The string returned doesn't have the precise size of maxPropertyLength due to JSON format.
     */
    MessageProcessor.prototype.processMessageDataArray = function (eventType, name, array, options) {
        var _this = this;
        var valueStr = new lazy_1.Lazy(function () {
            var newArray = [];
            var remainingChars = _this.isNonTruncated(name)
                ? Infinity
                : _this.configuration.maxPropertyLength;
            // Go over all the elements
            for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
                var element = array_1[_i];
                if (!Utils.isSerializablePrimitive(element)) {
                    log_1.getLogger().error("Unsupported type in array", element);
                    continue;
                }
                // ReSharper disable once TsResolvedFromInaccessibleModule
                var objAtElement = element.toString();
                var objAtElementLength = objAtElement.length;
                newArray.push(objAtElement.substr(0, remainingChars));
                // Add 3 more characters, it is the average length for each element: ",".
                remainingChars -= objAtElementLength + 3;
                // If no chars remaining, break
                if (remainingChars <= 0) {
                    break;
                }
            }
            return JSON.stringify(newArray);
        });
        // Test property
        return options.forcePost || this.configuration.isMatchEvent(eventType, name, valueStr) ?
            valueStr.getValue() :
            undefined;
    };
    MessageProcessor.prototype.processMessageDataValue = function (eventType, name, value, options) {
        var _this = this;
        if (!Utils.isSerializablePrimitive(value)) {
            return undefined;
        }
        // Convert
        var valueStr = new lazy_1.Lazy(function () {
            var result = value.toString();
            // Do not truncate aternity properties.
            if (!_this.isNonTruncated(name)) {
                result = result.substr(0, _this.configuration.maxPropertyLength);
            }
            return result;
        });
        // Test property
        return options.forcePost || this.configuration.isMatchEvent(eventType, name, valueStr) ?
            valueStr.getValue() :
            undefined;
    };
    /**
     * Converts a property to string representation.
     * @return Converted property or undefined if it doesn't match filters.
     */
    MessageProcessor.prototype.processMessageDataProperty = function (eventType, name, value, options) {
        if (Array.isArray(value)) {
            return this.processMessageDataArray(eventType, name, value, options);
        }
        else {
            return this.processMessageDataValue(eventType, name, value, options);
        }
    };
    MessageProcessor.prototype.processMessageDataObject = function (eventType, data, options) {
        var _this = this;
        if (options === void 0) { options = MessageProcessor.DEFAULT_POST_NATIVE_MESSAGE_OPTIONS; }
        Utils.rewriteObject(data, function (n, v) { return _this.processMessageDataProperty(eventType, n, v, options); }, false);
    };
    /**
     * Converts every property to string representation and removes unmatched ones.
     * If the property matches, then it is trimmed to Configuration.maxPropertyLength.
     */
    MessageProcessor.prototype.processMessageData = function (messageData, options) {
        if (options === void 0) { options = MessageProcessor.DEFAULT_POST_NATIVE_MESSAGE_OPTIONS; }
        for (var _i = 0, _a = messageData.Data; _i < _a.length; _i++) {
            var data = _a[_i];
            this.processMessageDataObject(messageData.EventType, data, options);
        }
    };
    MessageProcessor.DEFAULT_POST_NATIVE_MESSAGE_OPTIONS = {
        forcePost: false
    };
    return MessageProcessor;
}());
exports.MessageProcessor = MessageProcessor;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var TabsState_1 = __webpack_require__(65);
var FrameType_1 = __webpack_require__(11);
var webNavigation = chrome.webNavigation;
var WEBNAVIGATION_URL_FILTER = {
    url: [{ schemes: ["http", "https"] }]
};
var WebNavigation = /** @class */ (function () {
    function WebNavigation() {
        var _this = this;
        this.webNavigationTabsStates = new TabsState_1.TabsStates();
        this.reportCallbacks = new Set();
        // #endregion
        // #region Handlers
        this.onCreatedNavigationTarget = function (details) {
            log_1.getLogger().debug("WebNavigation.onCreatedNavigationTarget", details);
            _this.reportCallbacks.forEach(function (reportCallback) { return reportCallback("CreateNavigationTarget", details); });
        };
        this.onBeforeNavigate = function (details) {
            log_1.getLogger().debug("WebNavigation.onBeforeNavigate", details);
            // Get frame state
            var frameState = _this.webNavigationTabsStates.getFrame(details);
            // No frame state -> Create a new one
            if (frameState == null) {
                frameState = _this.addFrame(details);
                // Remove instant tabs
                setTimeout(function () { return _this.webNavigationTabsStates.validateTab(details.tabId); }, 60 * 1000);
            }
            else {
                // Remove and add a new one
                _this.webNavigationTabsStates.removeFrame(details.tabId, details.frameId);
                frameState = _this.addFrame(details);
            }
            // Initial values when starting navigation - these will be updated along the way
            frameState.currentUrl = details.url;
            _this.reportEvent("BeforeNavigate", details);
        };
        this.onCommitted = function (details) {
            log_1.getLogger().debug("onCommitted", details);
            var frameState = _this.webNavigationTabsStates.getFrame(details);
            if (frameState != null) {
                // Update current url
                frameState.currentUrl = details.url;
                // The URL to which the given frame will navigate.
                frameState.committedUrl = details.url;
            }
            else {
                log_1.getLogger().error("Frame state is null for tab: ", details.tabId, "frame: ", details.frameId);
            }
            _this.reportEvent("Committed", details);
        };
        // ReSharper disable once InconsistentNaming
        this.onDOMContentLoaded = function (details) {
            _this.reportEvent("DOMContentLoaded", details);
        };
        this.onCompleted = function (details) {
            _this.reportEvent("Completed", details);
        };
        this.onErrorOccurred = function (details) {
            _this.reportEvent("ErrorOccurred", details);
        };
        this.onLocationChanged = function (details) {
            log_1.getLogger().debug("WebNavigation.onLocationChanged", details);
            var currentFrame = _this.webNavigationTabsStates.getFrame(details);
            if (currentFrame == null) {
                log_1.getLogger().error("Frame does not exist in tab states");
                return;
            }
            currentFrame.currentUrl = details.url;
        };
        this.onRemoved = function (tabId) {
            _this.webNavigationTabsStates.removeTab(tabId);
        };
        // Monitor removed tabs for instance navigations.
        chrome.tabs.onRemoved.addListener(this.onRemoved);
        webNavigation.onCreatedNavigationTarget.addListener(this.onCreatedNavigationTarget, WEBNAVIGATION_URL_FILTER);
        webNavigation.onBeforeNavigate.addListener(this.onBeforeNavigate, WEBNAVIGATION_URL_FILTER);
        webNavigation.onCommitted.addListener(this.onCommitted, WEBNAVIGATION_URL_FILTER);
        webNavigation.onDOMContentLoaded.addListener(this.onDOMContentLoaded, WEBNAVIGATION_URL_FILTER);
        webNavigation.onCompleted.addListener(this.onCompleted, WEBNAVIGATION_URL_FILTER);
        webNavigation.onErrorOccurred.addListener(this.onErrorOccurred, WEBNAVIGATION_URL_FILTER);
        webNavigation.onHistoryStateUpdated.addListener(this.onLocationChanged, WEBNAVIGATION_URL_FILTER);
        webNavigation.onReferenceFragmentUpdated.addListener(this.onLocationChanged, WEBNAVIGATION_URL_FILTER);
        this.webNavigationTabsStates.validateAllTabs();
    }
    /**
     * Subscribe to events.
     * Only one subscription is supported.
     * If was subscribed before, new subscription doesn't replace old.
     *
     * @param callback Callback to receive all WebNavigation events.
     */
    WebNavigation.prototype.subscribe = function (callback) {
        if (!this.reportCallbacks.has(callback)) {
            this.reportCallbacks.add(callback);
        }
    };
    /**
     * Remove last subscription if any.
     */
    WebNavigation.prototype.unsubscribe = function (callback) {
        if (this.reportCallbacks.has(callback)) {
            this.reportCallbacks.delete(callback);
        }
    };
    WebNavigation.prototype.getFrame = function (tabId, frameId) {
        return this.webNavigationTabsStates.getFrame({ tabId: tabId, frameId: frameId });
    };
    // #region Utility functions
    WebNavigation.prototype.addFrame = function (details) {
        return this.webNavigationTabsStates.addFrame(details.tabId, details.frameId, details.url, FrameType_1.getFrameType(details.frameId), "");
    };
    WebNavigation.prototype.reportEvent = function (event, details) {
        log_1.getLogger().debug("WebNavigation.on" + event, details);
        var frameState = this.webNavigationTabsStates.getFrame(details);
        var tabState = this.webNavigationTabsStates.getTab(details.tabId);
        this.reportCallbacks.forEach(function (reportCallback) { return reportCallback(event, details, frameState, tabState); });
    };
    return WebNavigation;
}());
exports.WebNavigation = WebNavigation;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var utils_1 = __webpack_require__(0);
// import { chrome } from "../common/globalChrome";
function makeHash(tabId, frameId) {
    return tabId.toString() + "," + frameId.toString();
}
function tabIdFromHash(hash) {
    var commaIdx = hash.indexOf(",");
    var tabIdStr = hash.substring(0, commaIdx);
    return Number(tabIdStr);
}
function getFrameUrl() {
    return window.location.href;
}
/**
 * Main frame or sub frame state.
 */
var FrameState = /** @class */ (function () {
    function FrameState(frameId, tabId, url, type, requestId) {
        this.frameId = frameId;
        this.tabId = tabId;
        this.startUrl = url;
        this.currentUrl = url;
        this.type = type;
        this.requestId = requestId;
    }
    return FrameState;
}());
exports.FrameState = FrameState;
var TabsStates = /** @class */ (function () {
    function TabsStates() {
        this.frames = {};
    }
    TabsStates.prototype.addFrame = function (tabId, frameId, url, type, requestId) {
        var hash = makeHash(tabId, frameId);
        this.frames[hash] = new FrameState(frameId, tabId, url, type, requestId);
        var frame = this.frames[hash];
        return frame;
    };
    TabsStates.prototype.getTab = function (tabId) {
        return this.getFrame({ tabId: tabId, frameId: 0 });
    };
    TabsStates.prototype.getFrame = function (_a) {
        var _this = this;
        var tabId = _a.tabId, frameId = _a.frameId, _b = _a.url, url = _b === void 0 ? "" : _b;
        var frame = this.frames[makeHash(tabId, frameId)];
        if (frame == null) {
            // This can be a valid state: the extension is loaded in parallel with the pages,
            // and sometimes (in particular when url is given on the command line) it
            // finishes loading after some frames and this.frames[] is incomplete.
            // We add the missing frame lazily, here.
            if (url != null && url !== "") { // use the input details
                frame = this.addFrame(tabId, frameId, url, "unknown", "");
            }
            else {
                chrome.scripting.executeScript({
                    target: { tabId: tabId, allFrames: false, frameIds: [frameId] },
                    func: getFrameUrl
                }, function (results) {
                    if (chrome.runtime.lastError !== undefined) {
                        // There are valid scenarios where getFrame is called for a closed tab.
                        // for example when an ajax is cancelled during tab closing:
                        // WebRequest.onErrorOccured -> isMonitored -> tabStates.getTab -> getFrame
                        // We try to log only errors from unexpected scenarios.
                        if (chrome.runtime.lastError.message === "The frame was removed." ||
                            // tslint:disable-next-line:no-non-null-assertion
                            utils_1.startsWith(chrome.runtime.lastError.message, "No frame with id") ||
                            // tslint:disable-next-line:no-non-null-assertion
                            utils_1.startsWith(chrome.runtime.lastError.message, "No tab with id")) {
                            return; // frame null will be returned
                        }
                        else {
                            log_1.getLogger().error("chrome.tabs.executeScript failed in tabId", tabId, chrome.runtime.lastError.message);
                        }
                    }
                    else if (results != null) {
                        _this.addFrame(tabId, frameId, results[0].result, "unknown", "");
                    }
                    else {
                        log_1.getLogger().error("chrome.scripting.executeScript returned empty");
                    }
                });
            }
        }
        return frame;
    };
    TabsStates.prototype.getAllTabIds = function () {
        var tabIDs = [];
        chrome.tabs.query({}, function (resTabs) {
            if (chrome.runtime.lastError != null) {
                log_1.getLogger().error("chrome.runtime.lastError: " + chrome.runtime.lastError.message);
                return;
            }
            // tslint:disable-next-line:no-non-null-assertion
            tabIDs = resTabs.filter(function (tab) { return tab.id !== null; }).map(function (tab) { return tab.id; });
        });
        return tabIDs;
    };
    TabsStates.prototype.removeDeadFrames = function () {
        var _this = this;
        var liveTabIds = this.getAllTabIds();
        // Iterate on all frames and remove those in dead tabId's
        Object.keys(this.frames).forEach(function (hash) {
            var frame = _this.frames[hash];
            if (liveTabIds.indexOf(frame.tabId) === -1) {
                delete _this.frames[hash];
            }
        });
    };
    TabsStates.prototype.getFramesByWindowUrl = function (windowUrl) {
        var frames = [];
        for (var key in this.frames) {
            var frameState = this.frames[key];
            if (frameState.committedUrl === windowUrl) {
                frames.push(frameState);
            }
        }
        return frames;
    };
    TabsStates.prototype.removeTab = function (tabId) {
        var _this = this;
        // Iterate on all frames and remove those with the given tabId
        Object.keys(this.frames).forEach(function (hash) {
            var frame = _this.frames[hash];
            if (frame.tabId === tabId) {
                delete _this.frames[hash];
            }
        });
    };
    TabsStates.prototype.removeFrame = function (tabId, frameId) {
        if (frameId === 0) {
            // Remove the entire tab
            this.removeTab(tabId);
            return;
        }
        var removeHash = makeHash(tabId, frameId);
        // Remove the frame
        delete this.frames[removeHash];
    };
    TabsStates.prototype.hasTab = function (tabId) {
        return this.hasFrame(tabId, 0);
    };
    TabsStates.prototype.hasFrame = function (tabId, frameId) {
        return makeHash(tabId, frameId) in this.frames;
    };
    /**
     * Clear the state.
     */
    TabsStates.prototype.clear = function () {
        this.frames = {};
    };
    TabsStates.prototype.validateTab = function (tabId) {
        var _this = this;
        chrome.tabs.get(tabId, function (tab) {
            // If tab doesn't exist we have an error.
            // It means that this tab is not real and used for instant search.
            if (chrome.runtime.lastError != null) {
                _this.removeTab(tabId);
            }
        });
    };
    TabsStates.prototype.validateAllTabs = function () {
        for (var hash in this.frames) {
            var tabId = tabIdFromHash(hash);
            this.validateTab(tabId);
        }
    };
    return TabsStates;
}());
exports.TabsStates = TabsStates;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var tabs_1 = __webpack_require__(36);
var timeProvider_1 = __webpack_require__(3);
var Utils = __webpack_require__(0);
var MessagingModel_1 = __webpack_require__(2);
var TabsMonitoring = /** @class */ (function () {
    function TabsMonitoring() {
        var _this = this;
        this.globalTabsStates = {};
        // #endregion
        // #region Handlers
        this.onCreated = function (tab) {
            var timestamp = timeProvider_1.timeProvider.now();
            _this.onCreatedImpl(tab, timestamp);
        };
        this.onUpdated = function (tabId, changeInfo, tab) {
            if (_this.manager == null || !_this.manager.active) {
                return;
            }
            log_1.getLogger().log("Tab onUpdated", tabId, changeInfo, tab);
            if (tab.id == null) {
                log_1.getLogger().error("No tab.id for " + tab);
                return;
            }
            // Update title in content script
            if (typeof tab.title === "string") {
                _this.updateDocumentTitleInFrames(tab);
            }
            // Fetch the Tab State object asynchronously, create it if needed.
            _this.getOrCreateTabStateAsync(tabId)
                .then(function (tabState) {
                if (tabState == null) {
                    return;
                }
                if (typeof changeInfo.title !== "undefined") {
                    log_1.getLogger().log("Tab onUpdated previous title: " + tabState.title + ", new title: " + changeInfo.title);
                    tabState.title = changeInfo.title;
                    // Set initial documentTitle as title.
                    // It will be updated later in the updateDocumentTitleInFrames
                    tabState.documentTitle = changeInfo.title;
                }
                if (changeInfo.url != null) {
                    tabState.currentUrl = changeInfo.url;
                }
                if (changeInfo.status != null) {
                    // If we got here following a refresh there's an excellent chance the content script
                    // hadn't finished processing the config yet and TitleManager isn't available.
                    // It suffices to delay the message passing a bit. If some day it doesn't - add some
                    // 'CONTENT_READY' message, and do this only afterwards.
                    if (changeInfo.status === "complete") {
                        setTimeout(function () { return _this.updateDocumentTitleInFrames(tab); }, 0);
                    }
                }
                var message = _this.createDataMessage("Updated", tabId);
                if (_this.communication != null) {
                    _this.communication.postNativeMessage(message);
                }
            })
                .catch(function (err) {
                log_1.getLogger().error("Error while getting Tab State object on Tab Update.", tabId, err);
            });
        };
        this.onRemoved = function (tabId, removeInfo) {
            _this.onRemovedImpl(tabId, removeInfo, timeProvider_1.timeProvider.now());
        };
        this.onReplaced = function (addedTabId, removedTabId) {
            var timestamp = timeProvider_1.timeProvider.now();
            if (_this.manager == null || !_this.manager.active) {
                return;
            }
            log_1.getLogger().log("Tab onReplaced", addedTabId, removedTabId);
            // Replaced is like remove and then create so we need to insert the new data and report
            // And these must be reported in this order (remove -> create -> replace) because the
            // meaning of replace is that there was a remove and then a create
            chrome.tabs.get(addedTabId, function (addedTab) {
                // This is the body of the callback that will be called when the Tab accordant to the
                // addedTabId is retrieved.
                var addedTabObjectFetched = chrome.runtime.lastError == null;
                // Fetch the removed Tab State object asynchronously, create it if needed.
                _this.getOrCreateTabStateAsync(removedTabId)
                    .then(function (tabState) {
                    // This is the body of the resolve of the Promise that retrieves the Tab State
                    // object accordant to the removed Tab ID.
                    var replacedMessage;
                    if (addedTabObjectFetched && tabState != null) {
                        replacedMessage = _this.createDataMessage("Replaced", removedTabId, timestamp);
                        var messageData = replacedMessage.messageData.Data[0];
                        messageData.newTabId = addedTabId;
                    }
                    // Must first report removed, then created and only after both - replaced.
                    // Removed must be reported anyway - regardless of whether the new tabId exists or not.
                    _this.onRemovedImpl(removedTabId, {
                        windowId: addedTab.windowId,
                        isWindowClosing: false // Because the window isn't closing when it's replace.
                    }, timestamp);
                    if (addedTabObjectFetched) {
                        _this.onCreatedImpl(addedTab, timestamp);
                    }
                    // ReSharper disable once ConditionIsAlwaysConst
                    if (replacedMessage != null) {
                        if (_this.communication != null) {
                            _this.communication.postNativeMessage(replacedMessage);
                        }
                    }
                })
                    .catch(function (err) {
                    log_1.getLogger().error("Error while getting removed Tab State object on Tab Replace.", removedTabId, err);
                });
            });
        };
        this.onActivated = function (activeInfo) {
            if (_this.manager == null || !_this.manager.active) {
                return;
            }
            log_1.getLogger().log("Tab onActivated", activeInfo);
            // Fetch the Tab State object asynchronously, create it if needed.
            _this.getOrCreateTabStateAsync(activeInfo.tabId)
                .then(function (tabState) {
                if (tabState != null) {
                    var message = _this.createDataMessage("Activated", activeInfo.tabId);
                    if (_this.communication != null) {
                        _this.communication.postNativeMessage(message);
                    }
                    // fixing WAC bug with focus
                    chrome.tabs.get(activeInfo.tabId, function (tab) {
                        tabs_1.executeFunctionInTab(tab, function () { window.focus(); }, "focus");
                    });
                }
            })
                .catch(function (err) {
                log_1.getLogger().error("Error while getting Tab State object on Tab Activation.", activeInfo.tabId, err);
            });
        };
        this.onMoved = function (tabId, moveInfo) {
            if (_this.manager == null || !_this.manager.active) {
                return;
            }
            log_1.getLogger().log("Tab onMoved", moveInfo);
            // Fetch the Tab State object asynchronously, create it if needed.
            _this.getOrCreateTabStateAsync(tabId)
                .then(function (tabState) {
                if (tabState != null) {
                    var message = _this.createDataMessage("Moved", tabId);
                    if (_this.communication != null) {
                        _this.communication.postNativeMessage(message);
                    }
                }
            })
                .catch(function (err) {
                log_1.getLogger().error("Error while getting Tab State object on Tab Move.", tabId, err);
            });
        };
        this.onAttached = function (tabId, attachInfo) {
            if (_this.manager == null || !_this.manager.active) {
                return;
            }
            log_1.getLogger().log("Tab onAttached", attachInfo);
            // Fetch the Tab State object asynchronously, create it if needed.
            _this.getOrCreateTabStateAsync(tabId)
                .then(function (tabState) {
                if (tabState != null) {
                    var message = _this.createDataMessage("Attached", tabId);
                    if (_this.communication != null) {
                        _this.communication.postNativeMessage(message);
                    }
                }
            })
                .catch(function (err) {
                log_1.getLogger().error("Error while getting Tab State object on Tab Attach.", tabId, err);
            });
        };
        this.onDetached = function (tabId, detachInfo) {
            if (_this.manager == null || !_this.manager.active) {
                return;
            }
            log_1.getLogger().log("Tab onDetached", detachInfo);
            // Fetch the Tab State object asynchronously, create it if needed.
            _this.getOrCreateTabStateAsync(tabId)
                .then(function (tabState) {
                if (tabState != null) {
                    var message = _this.createDataMessage("Detached", tabId);
                    if (_this.communication != null) {
                        _this.communication.postNativeMessage(message);
                    }
                }
            })
                .catch(function (err) {
                log_1.getLogger().error("Error while getting Tab State object on Tab Detach.", tabId, err);
            });
        };
        this.findNameChanged = function (tab) {
            if (tab.id == null) {
                return;
            }
            var tabState = _this.globalTabsStates[tab.id];
            if (tabState != null && tabState.title !== tab.title) {
                if (typeof tab.title !== "undefined") {
                    tabState.title = tab.title;
                }
                log_1.getLogger().log("Interval found a titleChange", tabState);
                var message = _this.createDataMessage("TitleChange", tab.id);
                if (_this.communication != null) {
                    _this.communication.postNativeMessage(message);
                }
            }
        };
        this.tabMonitoringEnabled = false;
    }
    // #region Utility
    TabsMonitoring.prototype.makeEventName = function (event) {
        return TabsMonitoring.TAB_EVENT_NAMESPACE + "." + event;
    };
    /**
     * Create base tab message.
     */
    TabsMonitoring.prototype.createDataMessage = function (event, tabId, timestamp) {
        if (timestamp === void 0) { timestamp = timeProvider_1.timeProvider.now(); }
        var message = new MessagingModel_1.OutgoingEventMessage(this.makeEventName(event), timestamp);
        var tabState = this.globalTabsStates[tabId];
        var messageData = message.messageData.Data[0];
        messageData.tabId = tabId;
        messageData.title = tabState.title;
        if (tabState.status != null) {
            messageData.status = tabState.status;
        }
        if (tabState.currentUrl != null) {
            messageData.currentUrl = tabState.currentUrl;
        }
        return message;
    };
    TabsMonitoring.prototype.addTab = function (tab) {
        var tabId = tab.id;
        if (tabId == null) {
            return;
        }
        var title = tab.title != null ? tab.title : "";
        this.globalTabsStates[tabId] = {
            currentUrl: tab.url,
            tabId: tabId,
            windowId: tab.windowId,
            title: title,
            documentTitle: title
        };
        if (tab.status != null) {
            this.globalTabsStates[tabId].status = tab.status;
        }
    };
    TabsMonitoring.prototype.addTabIfDoesntExists = function (tabId, tab) {
        if (this.globalTabsStates[tabId] == null) {
            log_1.getLogger().log("Adding tab: ", tab);
            this.addTab(tab);
        }
    };
    // #endregion
    // #region Exported privates
    /**
     * @param tabId Tab identifier
     * @return Tab state.
     */
    TabsMonitoring.prototype.getTabState = function (tabId) {
        var tabState = this.globalTabsStates[tabId];
        if (tabState != null) {
            return __assign({}, tabState);
        }
        else {
            return null;
        }
    };
    /**
     * Get a Tab State object accordant to some Tab ID.
     * @param tabId The ID of the Tab whose Tab State object is to be fetched or created.
     * @param browserTab Optional Browser Tab object, used in the creation of the requested Tab State object.
     * @return Promise to deliver a Tab State object or a null, if such object does not exist and should not be created.
     */
    TabsMonitoring.prototype.getOrCreateTabStateAsync = function (tabId, browserTab) {
        var _this = this;
        if (browserTab === void 0) { browserTab = null; }
        var tabDataPromise = new Promise(function (resolve, reject) {
            // This is the body of the output Promise.
            var tabState = _this.globalTabsStates[tabId];
            if (tabState != null) {
                // Tab State object with the requested ID already exists.
                // Resolve the Promise with the existing Tab State.
                resolve(tabState);
            }
            else {
                // Tab State object with the requested ID does not exist.
                // As there is no Tab State object accordant to the requested Tab ID, resolve the output Promise with null.
                resolve(null);
            }
        });
        return tabDataPromise;
    };
    /**
     * Get a browser Tab object accordant to some Tab ID.
     * @param tabId The ID of the Tab whose browser Tab object is to be fetched or created.
     * @return Promise to deliver a browser Tab object.
     */
    TabsMonitoring.prototype.getTab = function (tabId) {
        var browserTabPromise = new Promise(function (resolve, reject) {
            // This is the body of the Promise.
            try {
                chrome.tabs.get(tabId, function (browserTab) {
                    // This is the body of the callback supplied to 'chrome.tabs.get'.
                    if (chrome.runtime.lastError == null) {
                        // The browser Tab object accordant to the requested Tab ID had been found.
                        // Resolve the Promise with that Tab object.
                        resolve(browserTab);
                    }
                    else {
                        // There is no browser Tab with the requested Tab ID.
                        // Reject the Promise.
                        log_1.getLogger().error("No Browser Tab object for Tab ID.", tabId, chrome.runtime.lastError);
                        reject(chrome.runtime.lastError);
                    }
                });
            }
            catch (err) {
                // Exception occured in the call to 'chrome.tabs.get'.
                // Reject the Promise.
                log_1.getLogger().error("Exception while getting Browser Tab object.", tabId, err);
                reject(err);
            }
        });
        return browserTabPromise;
    };
    TabsMonitoring.prototype.onCreatedImpl = function (tab, timestamp) {
        if (this.manager == null || !this.manager.active) {
            return;
        }
        log_1.getLogger().log("Tab onCreated", tab.id, tab);
        if (tab.id == null) {
            log_1.getLogger().error("No tab.id for " + tab);
            return;
        }
        delete this.globalTabsStates[tab.id];
        this.addTab(tab);
        var message = this.createDataMessage("Created", tab.id, timestamp);
        if (this.communication != null) {
            this.communication.postNativeMessage(message);
        }
    };
    TabsMonitoring.prototype.onRemovedImpl = function (tabId, removeInfo, timestamp) {
        var _this = this;
        if (this.manager == null || !this.manager.active) {
            return;
        }
        log_1.getLogger().log("Tab onRemoved", tabId, removeInfo);
        // Fetch the Tab State object asynchronously, create it if needed.
        this.getOrCreateTabStateAsync(tabId)
            .then(function (tabState) {
            if (tabState != null) {
                var message = _this.createDataMessage("Removed", tabId, timestamp);
                var messageData = message.messageData.Data[0];
                messageData.isWindowClosing = removeInfo.isWindowClosing;
                if (_this.communication != null) {
                    _this.communication.postNativeMessage(message);
                }
                delete _this.globalTabsStates[tabId];
            }
        })
            .catch(function (err) {
            log_1.getLogger().error("Error while getting Tab State object on Tab Remove.", tabId, err);
        });
    };
    // #endregion
    /**
     * Ask document.title property from top frame and publish it to other frames in the tab.
     * This way we are bypassing the cross-site domain issue.
     */
    TabsMonitoring.prototype.updateDocumentTitleInFrames = function (tab) {
        if (tab.id == null || tab.title == null || tab.url == null) {
            return;
        }
        if (!Utils.startsWith(tab.url, "http")) {
            return;
        }
        var documentTitle;
        // Ask documentTitle from top frame (frameId = 0) and then publish it to all frames in tab.
        var documentTitleRequest = {
            messageType: MessagingModel_1.ChromeContentMessageType.DOCUMENT_TITLE_REQUEST
        };
        log_1.getLogger().log("Requesting document title from tab id: " + tab.id + ", url: " + tab.url);
        tabs_1.sendMessageToTab(tab, 0, // Request only top frame
        documentTitleRequest, function (response) {
            var documentTitleResponse = response;
            if (typeof response === "undefined") {
                log_1.getLogger().warn("Bad response", response);
                return;
            }
            log_1.getLogger().log("Requesting document title from tab id: " + tab.id + ", url: " + tab.url);
            // ReSharper disable once SuspiciousTypeofCheck
            if (documentTitleResponse === null ||
                documentTitleResponse.messageType !== MessagingModel_1.ChromeContentMessageType.DOCUMENT_TITLE_RESPONSE ||
                typeof documentTitleResponse.documentTitle !== "string") {
                log_1.getLogger().warn("Bad documentTitleResponse", response);
                if (tab.title !== undefined) {
                    documentTitle = tab.title;
                }
            }
            else { // documentTitleResponse is valid
                documentTitle = documentTitleResponse.documentTitle;
            }
            if (documentTitle === undefined) {
                return;
            }
            // Send title update to all frames
            var documentTitleUpdate = {
                messageType: MessagingModel_1.ChromeContentMessageType.DOCUMENT_TITLE_UPDATE,
                documentTitle: documentTitle
            };
            tabs_1.sendMessageToTab(tab, undefined, documentTitleUpdate);
        }, function (lastError) {
            log_1.getLogger().warn("Couldn't request document.title from tab id: " + tab.id + ", url: " + tab.url, lastError);
        });
    };
    TabsMonitoring.prototype.forAllTabs = function (func) {
        chrome.tabs.query({}, function (tabs) { return tabs.forEach(func); });
    };
    TabsMonitoring.prototype.initTabsMonitoring = function (manager, communication) {
        var _this = this;
        this.manager = manager;
        this.communication = communication;
        if (this.tabMonitoringEnabled) {
            log_1.getLogger().error("You can't init tab monitoring twice in a row (without uninit)");
            return;
        }
        this.tabMonitoringEnabled = true;
        chrome.tabs.onCreated.addListener(this.onCreated);
        chrome.tabs.onUpdated.addListener(this.onUpdated);
        chrome.tabs.onRemoved.addListener(this.onRemoved);
        if (chrome.tabs.onReplaced != null) {
            chrome.tabs.onReplaced.addListener(this.onReplaced);
        }
        chrome.tabs.onActivated.addListener(this.onActivated);
        if (chrome.tabs.onMoved != null) {
            chrome.tabs.onMoved.addListener(this.onMoved);
        }
        chrome.tabs.onAttached.addListener(this.onAttached);
        chrome.tabs.onDetached.addListener(this.onDetached);
        this.updateTabInterval = setInterval(function () { return _this.forAllTabs(_this.findNameChanged); }, 1000);
        // Query existing tabs
        this.forAllTabs(function (tab) {
            if (tab.id == null)
                return;
            _this.addTabIfDoesntExists(tab.id, tab);
            var message = _this.createDataMessage("Discovered", tab.id);
            if (_this.communication != null) {
                _this.communication.postNativeMessage(message);
            }
        });
    };
    TabsMonitoring.prototype.uninitTabsMonitoring = function () {
        this.tabMonitoringEnabled = false;
        this.globalTabsStates = {};
        if (this.updateTabInterval !== undefined) {
            clearInterval(this.updateTabInterval);
            this.updateTabInterval = undefined;
        }
        chrome.tabs.onCreated.removeListener(this.onCreated);
        chrome.tabs.onUpdated.removeListener(this.onUpdated);
        chrome.tabs.onRemoved.removeListener(this.onRemoved);
        if (chrome.tabs.onReplaced != null) {
            chrome.tabs.onReplaced.removeListener(this.onReplaced);
        }
        chrome.tabs.onActivated.removeListener(this.onActivated);
        if (chrome.tabs.onMoved != null) {
            chrome.tabs.onMoved.removeListener(this.onMoved);
        }
        chrome.tabs.onAttached.removeListener(this.onAttached);
        chrome.tabs.onDetached.removeListener(this.onDetached);
        this.manager = undefined;
        this.communication = undefined;
    };
    TabsMonitoring.TAB_EVENT_NAMESPACE = "ui:chrome:Tab";
    return TabsMonitoring;
}());
exports.TabsMonitoring = TabsMonitoring;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tabs_1 = __webpack_require__(36);
var MessagingModel_1 = __webpack_require__(2);
function sendAllTabsMessage(tabsMonitoring, message) {
    tabsMonitoring.forAllTabs(function (tab) { return tabs_1.sendMessageToTabWithLog(tab, message); });
}
/**
 * Monitor HTML events in content script.
 */
var HtmlEventsMonitoring = /** @class */ (function () {
    function HtmlEventsMonitoring() {
    }
    HtmlEventsMonitoring.prototype.initEventsMonitoring = function (tabsMonitoring) {
        this.tabsMonitoring = tabsMonitoring;
        sendAllTabsMessage(tabsMonitoring, MessagingModel_1.ContentMessageType.RECONFIGURE);
    };
    HtmlEventsMonitoring.prototype.uninitEventsMonitoring = function () {
        if (this.tabsMonitoring != null) {
            sendAllTabsMessage(this.tabsMonitoring, MessagingModel_1.ContentMessageType.UNINITIALIZE);
        }
    };
    return HtmlEventsMonitoring;
}());
exports.HtmlEventsMonitoring = HtmlEventsMonitoring;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var WacAPI_1 = __webpack_require__(69);
var browserInfo_1 = __webpack_require__(8);
var MessagingModel_1 = __webpack_require__(2);
/**
 * Default response with all features.
 */
var GREETING_RESPONSE = {
    messageType: "GreetingResponse",
    features: ["HTMLEvents", "Visibility"]
};
var FAREWELL_RESPONSE = {
    messageType: "FarewellResponse",
};
var NOT_ACTIVE_RESPONSE = {
    messageType: "NotActiveResponse"
};
var WAC_EXTENSION_IDS = [
    "poffncjphkchclemkfpadkjfgkbfkafp",
    "cdnnpklbhipmnknojapkdiocjgmplpcc",
    "nckjcpchnnejhldedgelopkoemdhdbbf"
];
var SUPPORTS_CHROME_MANAGEMENT = chrome.management != null;
/**
 * Communication between Agent extension and WAC
 */
var WacCommunication = /** @class */ (function () {
    function WacCommunication() {
        var _this = this;
        this.active = false;
        this.onInjectedMessage = function (_a, messageSender) {
            var messageType = _a.messageType, message = _a.message;
            if (messageType !== "MessageFromInjected" || message == null) {
                return;
            }
            if (messageSender.tab == null || messageSender.tab.id == null || messageSender.frameId == null) {
                return;
            }
            var sender = {
                browser: browserInfo_1.browserInfo.name,
                tabId: messageSender.tab.id,
                frameId: messageSender.frameId
            };
            _this.sendMessageToWac({ messageType: messageType, message: message, sender: sender });
        };
        this.onTabRemoved = function (tabId) {
            _this.sendMessageToWac({ messageType: "TabRemoved", removed: { browser: browserInfo_1.browserInfo.name, tabId: tabId } });
        };
        this.onMessageExternal = function (message, sender) { return __awaiter(_this, void 0, void 0, function () {
            var _a, browser, tabId;
            return __generator(this, function (_b) {
                log_1.getLogger().log("Got message", message, sender);
                // Reply with error when manager is not active
                if (!this.active) {
                    log_1.getLogger().log("Extension is not ready");
                    return [2 /*return*/];
                }
                if (sender.id == null) {
                    return [2 /*return*/];
                }
                if (!WacAPI_1.isExtensionMessage(message))
                    return [2 /*return*/];
                switch (message.messageType) {
                    case "GreetingRequest":
                        if (!WacAPI_1.validateGreetingRequest(message))
                            return [2 /*return*/];
                        this.handleGreeting(sender.id, message);
                        break;
                    case "FarewellRequest":
                        if (!WacAPI_1.validateFarewellRequest(message))
                            return [2 /*return*/];
                        this.handleFarewell(sender.id);
                        break;
                    case "MessageToInjected":
                        log_1.getLogger().log("Sending exec script response");
                        if (message.recipient.browser === "InternetExplorer" /* IE */) {
                            this.sendToIE(message);
                        }
                        break;
                    case "InjectNotificationsFrame":
                        _a = message.recipient, browser = _a.browser, tabId = _a.tabId;
                        if (!(this.isBrowserChromiumBased(browser) && tabId != null)) {
                            this.sendToIE({
                                messageType: "InjectNotificationsFrame",
                                recipient: message.recipient
                            });
                        }
                        break;
                    case "ConfigurationUpdate":
                        log_1.getLogger().log("ConfigurationUpdate received");
                        if (!WacAPI_1.validateConfigurationUpdate(message))
                            return [2 /*return*/];
                        if (this.configurationManager != null) {
                            this.configurationManager.setWacConfiguration(message.eventConditions);
                            this.handleConfigurationUpdate(message);
                        }
                        break;
                }
                return [2 /*return*/];
            });
        }); };
        this.onDisabledListener = function (disabledExtInfo) {
            if (disabledExtInfo.id === _this.wacExtensionId) {
                _this.handleFarewell(disabledExtInfo.id);
            }
        };
        this.onWebNavigation = function (event, details, frameState, tabState) {
            if (tabState == null || frameState == null) {
                return;
            }
            if (!_this.isNavigationFinished(tabState.statusCode)) {
                return;
            }
            if (_this.wacExtensionId == null) {
                return;
            }
            if (event !== "Completed" || frameState.committedUrl == null) {
                return;
            }
            if (_this.tabsMonitoring == null) {
                return;
            }
            var tabId = tabState.tabId;
            var frameId = frameState.frameId;
            var frameCurrentUrl = frameState.currentUrl;
            var frameUrl = frameState.startUrl;
            var frameCommittedUrl = frameState.committedUrl;
            var tabMonitoringState = _this.tabsMonitoring.getTabState(tabId);
            if (tabMonitoringState == null) {
                throw new Error("No tab state in tabId " + tabId);
            }
            _this.sendMessageToWac({
                messageType: "ContentInjected",
                frameInfo: {
                    title: tabMonitoringState.title,
                    browser: browserInfo_1.browserInfo.name,
                    frameId: frameId,
                    tabId: tabId,
                    frameCurrentUrl: frameCurrentUrl,
                    frameUrl: frameUrl,
                    frameCommittedUrl: frameCommittedUrl
                }
            });
        };
    }
    WacCommunication.prototype.activate = function (nativeMessageSender, tabsMonitoring, configManager) {
        log_1.getLogger().trace("activate WacCommunication");
        if (this.active || !SUPPORTS_CHROME_MANAGEMENT) {
            return;
        }
        this.active = true;
        this.nativeMessagePoster = nativeMessageSender;
        this.tabsMonitoring = tabsMonitoring;
        this.configurationManager = configManager;
        if (chrome !== undefined && chrome.runtime !== undefined && chrome.runtime.onMessageExternal !== undefined) {
            // Unit tests run in page (not background) context, so chrome.runtime isn't available
            chrome.runtime.onMessageExternal.addListener(this.onMessageExternal);
            chrome.runtime.onMessage.addListener(this.onInjectedMessage);
        }
    };
    WacCommunication.prototype.isActive = function () {
        return this.active === true && this.wacExtensionId != null;
    };
    WacCommunication.prototype.deactivate = function () {
        log_1.getLogger().trace("deactivate WacCommunication");
        if (!this.active || !SUPPORTS_CHROME_MANAGEMENT) {
            return;
        }
        this.active = false;
        this.nativeMessagePoster = undefined;
        this.wacExtensionId = undefined;
        if (chrome !== undefined && chrome.runtime !== undefined && chrome.runtime.onMessageExternal !== undefined) {
            // Unit tests run in page (not background) context, so chrome.runtime isn't available
            chrome.runtime.onMessageExternal.removeListener(this.onMessageExternal);
            chrome.runtime.onMessage.removeListener(this.onInjectedMessage);
            chrome.management.onDisabled.removeListener(this.onDisabledListener);
        }
        log_1.getLogger().log("Sending farewell response");
        if (this.wacExtensionId != null) {
            this.sendMessageToWac(FAREWELL_RESPONSE);
        }
    };
    WacCommunication.prototype.sendMessageToWac = function (message) {
        if (this.wacExtensionId == null) {
            throw new Error("Not connected to Wac Extension");
        }
        var promise = chrome.runtime.sendMessage(this.wacExtensionId, message);
    };
    WacCommunication.prototype.isBrowserChromiumBased = function (browserName) {
        return (browserName === "Chrome" /* Chrome */ || browserName === "Edge" /* Edge */);
    };
    WacCommunication.prototype.handleGreeting = function (extId, greetingRequest) {
        this.wacExtensionId = extId;
        chrome.tabs.onRemoved.addListener(this.onTabRemoved);
        chrome.management.onDisabled.addListener(this.onDisabledListener);
        this.sendToIE(greetingRequest);
        if (this.configurationManager != null) {
            this.configurationManager.setWacActive(true);
        }
        log_1.getLogger().log("Sending greeting response", greetingRequest);
        this.sendMessageToWac(GREETING_RESPONSE);
        // todo (inject to all frames) or (send list of all tabs/frames to wac)
    };
    WacCommunication.prototype.handleFarewell = function (extId) {
        // Unsubscribe to WAC disablement
        chrome.management.onDisabled.removeListener(this.onDisabledListener);
        chrome.tabs.onRemoved.removeListener(this.onTabRemoved);
        // Forward to IE
        this.sendToIE({ messageType: "FarewellRequest" });
        // todo: Forward to frames
        log_1.getLogger().log("Sending farewell response");
        this.sendMessageToWac(FAREWELL_RESPONSE);
        this.wacExtensionId = undefined;
        if (this.configurationManager != null) {
            this.configurationManager.setWacActive(false);
        }
    };
    WacCommunication.prototype.handleConfigurationUpdate = function (message) {
        this.sendToIE(message);
        log_1.getLogger().log("Sending Configuration Update To IE");
    };
    WacCommunication.prototype.isNavigationFinished = function (httpStatusCode) {
        if (httpStatusCode === undefined)
            return false;
        if (httpStatusCode === 304) {
            // Special case, https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304 :
            // "no need to retransmit the requested resources. It is an implicit redirection to a cached resource"
            return true;
        }
        if (httpStatusCode < 200 || httpStatusCode >= 300) {
            return false;
        }
        return true;
    };
    WacCommunication.prototype.incomingMessage = function (message) {
        if (!WacAPI_1.isExtensionMessage(message)) {
            return;
        }
        this.sendMessageToWac(message);
    };
    WacCommunication.prototype.sendToIE = function (message) {
        if (this.nativeMessagePoster == null) {
            console.error(new Error("Unable to exec script in 'InternetExplorer': No nativeMessagePoster"));
        }
        else {
            this.nativeMessagePoster.postNativeMessage(new MessagingModel_1.WacOutgoingNativeMessage(message));
        }
    };
    return WacCommunication;
}());
exports.WacCommunication = WacCommunication;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PROTOCOL_VERSION = 1;
function isMessageToInjected(m) {
    var mm = m;
    return mm.messageType === "MessageToInjected";
}
exports.isMessageToInjected = isMessageToInjected;
function isMessageFromInjected(m) {
    var mm = m;
    return mm.messageType === "MessageFromInjected" && typeof mm.sender === "object";
}
exports.isMessageFromInjected = isMessageFromInjected;
function isMatchReportEvent(event) {
    var validateEventType = function (eventType) { return eventType === "Committed" ||
        eventType === "Completed" ||
        eventType === "Visible" ||
        eventType === "keydown" ||
        eventType === "click" ||
        eventType === "dblclick" ||
        eventType === "mousedown" ||
        eventType === "mouseenter" ||
        eventType === "mouseup" ||
        eventType === "change" ||
        eventType === "contextmenu"; };
    return typeof event.documentCommittedUrl === "string" &&
        (event.eventType !== "keydown" || typeof event.modifierKeys === "string") &&
        typeof event.documentTitle === "string" &&
        typeof event.tabId === "number" &&
        typeof event.frameId === "number" &&
        typeof event.timeStamp === "number" &&
        validateEventType(event.eventType);
}
function isEventMatchReport(message) {
    return message.messageType === "EventMatchReport" &&
        typeof message.event === "object" &&
        isMatchReportEvent(message.event);
}
exports.isEventMatchReport = isEventMatchReport;
function validateGreetingRequest(message) {
    return message.messageType === "GreetingRequest" &&
        typeof message.contentScript === "string" &&
        typeof message.protocolVersion === "number" &&
        message.protocolVersion === exports.PROTOCOL_VERSION;
}
exports.validateGreetingRequest = validateGreetingRequest;
function validateFarewellRequest(message) {
    return message.messageType === "FarewellRequest";
}
exports.validateFarewellRequest = validateFarewellRequest;
function isGreetingResponse(message) {
    if (message.messageType !== "GreetingResponse") {
        return false;
    }
    var features = message.features;
    if (!Array.isArray(features) ||
        features.length === 0 ||
        features.some(function (f) { return typeof f !== "string"; })) {
        throw new Error("GreetingResponse");
    }
    return true;
}
exports.isGreetingResponse = isGreetingResponse;
function validateConditionProperty(con) {
    return (con.matchType === "exact" || con.matchType === "regex") &&
        typeof con.property === "string" &&
        typeof con.value === "string";
}
function validateHtmlEventCondition(eventCondition) {
    return typeof eventCondition.name === "string" &&
        typeof eventCondition.event === "string" &&
        Array.isArray(eventCondition.conditionProperties) &&
        eventCondition.conditionProperties.every(validateConditionProperty);
}
function validateConfigurationUpdate(message) {
    return message.messageType === "ConfigurationUpdate" &&
        Array.isArray(message.eventConditions) &&
        message.eventConditions.every(validateHtmlEventCondition);
}
exports.validateConfigurationUpdate = validateConfigurationUpdate;
/**
 * @return true when message is Extension message.
 */
function isExtensionMessage(message) {
    var messageType = message.messageType;
    return typeof messageType === "string";
}
exports.isExtensionMessage = isExtensionMessage;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var PersistentConfiguration_1 = __webpack_require__(71);
var ConfigurationManagerHelper_1 = __webpack_require__(72);
var CONFIGURATION_STORAGE = "_AternityConfiguration_";
/**
 * Manages configurations from Agent and from WAC
 */
var ConfigurationManager = /** @class */ (function () {
    function ConfigurationManager() {
        this.agentConfiguration = new PersistentConfiguration_1.PersistentConfiguration(CONFIGURATION_STORAGE);
        this.wacActive = false;
    }
    ConfigurationManager.prototype.initConfigurationManager = function (manager) {
        this.manager = manager;
    };
    ConfigurationManager.prototype.setAgentConfiguration = function (jsonString) {
        log_1.getLogger().log("Received new configuration from Agent");
        this.agentConfiguration.parseAndSetConfiguration(jsonString);
        this.activateAgentConfigurationIfConfigured();
    };
    ConfigurationManager.prototype.setWacConfiguration = function (wacConfiguration) {
        log_1.getLogger().log("Received new configuration from WAC", wacConfiguration);
        if (this.wacActive && this.manager != null) {
            this.manager.deactivate();
            this.wacConfiguration = ConfigurationManagerHelper_1.transform(wacConfiguration);
            this.manager.activate(this.wacConfiguration);
        }
    };
    ConfigurationManager.prototype.setWacActive = function (active) {
        this.wacActive = active;
        this.activateAgentConfigurationIfConfigured();
    };
    ConfigurationManager.prototype.resetConfiguration = function () {
        if (this.agentConfiguration != null) {
            this.agentConfiguration.clearConfiguration();
        }
    };
    ConfigurationManager.prototype.getConfiguration = function () {
        return this.wacActive && this.wacConfiguration != null ? this.wacConfiguration : this.agentConfiguration.getConfiguration();
    };
    ConfigurationManager.prototype.activateAgentConfigurationIfConfigured = function () {
        if (!this.wacActive && this.manager != null) {
            this.manager.deactivate();
            this.manager.activate(this.agentConfiguration.getConfiguration());
        }
    };
    return ConfigurationManager;
}());
exports.ConfigurationManager = ConfigurationManager;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = __webpack_require__(1);
var Configuration_1 = __webpack_require__(12);
var Utils = __webpack_require__(0);
var ConfigurationData_1 = __webpack_require__(9);
/**
 * Stores and loads configuration from persistent storage.
 */
var PersistentConfiguration = /** @class */ (function () {
    /**
     * Load configuration from the localStorage if exists.
     * Use default configuration if no configuration was stored.
     *
     * @param storageKey {string} Key used for configuration storage in localStorage object.
     */
    function PersistentConfiguration(storageKey) {
        // Set configuration from the local storage
        this.storageKey = storageKey;
        this.configuration = new Configuration_1.Configuration(Utils.deepClone(ConfigurationData_1.EMPTY_CONFIGURATION));
        // mv3 change - Tested
        var p = this.myInit(storageKey);
    }
    // mv3
    PersistentConfiguration.prototype.myInit = function (storageKey) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, chrome.storage.local.get(null)
                            .then(function (items) {
                            _this.parseAndSetConfiguration(String(items.storageKey));
                        })
                            .catch(function (response) { return log_1.getLogger().error(response); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Parse configuration string and update configuration if successfully parsed.
     * If configuration string is invalid, set default configuration.
     */
    PersistentConfiguration.prototype.parseAndSetConfiguration = function (configurationString) {
        // Start with default
        var configurationData = Utils.deepClone(ConfigurationData_1.EMPTY_CONFIGURATION);
        if (configurationString != null && configurationString.length > 0) {
            var parsedConfiguration = void 0;
            try {
                // tslint:disable-next-line no-unsafe-any
                parsedConfiguration = JSON.parse(configurationString);
            }
            catch (e) {
                log_1.getLogger().error("Failed parsing configuration", configurationString);
                return;
            }
            Utils.populate(parsedConfiguration, configurationData);
        }
        this.setConfigurationImpl(configurationData);
    };
    PersistentConfiguration.prototype.setConfiguration = function (configurationData) {
        var newConfigurationData;
        // Validate version
        if (configurationData == null) {
            log_1.getLogger().log("No configuration found, using empty");
            newConfigurationData = Utils.deepClone(ConfigurationData_1.EMPTY_CONFIGURATION);
        }
        else if (configurationData.ConfigurationVersion !== ConfigurationData_1.CONFIGURATION_VERSION) {
            log_1.getLogger().log("Found configuration in old format, using empty");
            newConfigurationData = Utils.deepClone(ConfigurationData_1.EMPTY_CONFIGURATION);
        }
        else {
            log_1.getLogger().log("Set new configuration", configurationData);
            newConfigurationData = Utils.deepClone(configurationData);
        }
        this.setConfigurationImpl(newConfigurationData);
    };
    /**
     * Set configuration implementation.
     */
    PersistentConfiguration.prototype.setConfigurationImpl = function (configurationData) {
        var resultingConfigurationData = Utils.deepClone(configurationData);
        // Do not allow negative values.
        if (resultingConfigurationData.MaxPropertyLength != null &&
            resultingConfigurationData.MaxPropertyLength < 0) {
            resultingConfigurationData.MaxPropertyLength = 0;
        }
        this.configuration = new Configuration_1.Configuration(resultingConfigurationData);
        // Store locally
        // oroginal
        // localStorage.setItem(this.storageKey, JSON.stringify(configurationData));
        // chrome.storage.local.set([this.storageKey], JSON.stringify(configurationData));
        // const storageKey = this.storageKey;
        var config = JSON.stringify(configurationData);
        var promise = chrome.storage.local.set({ storageKey: config });
    };
    PersistentConfiguration.prototype.clearConfiguration = function () {
        this.setConfiguration(ConfigurationData_1.EMPTY_CONFIGURATION);
    };
    PersistentConfiguration.prototype.getConfiguration = function () {
        return this.configuration;
    };
    /**
     * Serialized configuration object.
     */
    PersistentConfiguration.prototype.getSerializedConfiguration = function () {
        var _this = this;
        // mv3
        var storageKeyValue = "";
        // chrome.storage.local.get([this.storageKey], ( items) => {storageKeyValue = String(items[this.storageKey]);
        // 	return storageKeyValue;
        // });
        var promise = chrome.storage.local.get([this.storageKey]);
        promise.then(function (value) { return storageKeyValue = String(value[_this.storageKey]); }).catch(function (reason) { return log_1.getLogger().error("storage key error", reason); });
        return storageKeyValue;
        // original
        // return localStorage.getItem(this.storageKey);
    };
    PersistentConfiguration.clearPersistentConfiguration = function (storageKey) {
        // mv3
        var promise = chrome.storage.local.remove(storageKey).catch(function (reason) { return log_1.getLogger().error("storage key remove error", reason); });
        // localStorage.removeItem(storageKey);
    };
    return PersistentConfiguration;
}());
exports.PersistentConfiguration = PersistentConfiguration;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ConfigurationData_1 = __webpack_require__(9);
var utils_1 = __webpack_require__(0);
var Configuration_1 = __webpack_require__(12);
function createConsolidatedEventConfig(eventConditions) {
    return eventConditions.map(function (eventCondition) {
        var conditions = {};
        var eventName = eventCondition.event;
        var committedUrl = eventCondition.conditionProperties.filter(function (value) { return value.property === "documentCommittedUrl"; })[0].value;
        for (var _i = 0, _a = eventCondition.conditionProperties; _i < _a.length; _i++) {
            var _b = _a[_i], value = _b.value, matchType = _b.matchType, property = _b.property;
            if (conditions[property] == null) {
                conditions[property] = [];
            }
            conditions[property].push({ MatchType: matchType, Value: value });
        }
        var eventsPerPropertyValue = {};
        eventsPerPropertyValue[committedUrl] = {};
        eventsPerPropertyValue[committedUrl][eventName] = [{ Conditions: conditions }];
        return eventsPerPropertyValue;
    });
}
/**
 * Makes configuration readable by agent
 * @param eventsPerProperty
 */
function transform(eventsPerProperty) {
    var eventsPerPropertyValue = {};
    var eventConfig = {};
    var consolidatedEventConfig = createConsolidatedEventConfig(eventsPerProperty);
    for (var _i = 0, consolidatedEventConfig_1 = consolidatedEventConfig; _i < consolidatedEventConfig_1.length; _i++) {
        var event_1 = consolidatedEventConfig_1[_i];
        // get documentCommittedUrl
        var documentCommittedUrl = Object.keys(event_1)[0];
        if (eventsPerPropertyValue[documentCommittedUrl] == null) {
            eventsPerPropertyValue[documentCommittedUrl] = {};
        }
        var conditionsPerEvent = event_1[documentCommittedUrl];
        for (var _a = 0, _b = Object.keys(conditionsPerEvent); _a < _b.length; _a++) {
            var eventName = _b[_a];
            if (eventConfig[eventName] == null) {
                eventConfig[eventName] = conditionsPerEvent[eventName];
            }
            if (eventsPerPropertyValue[documentCommittedUrl][eventName] == null) {
                var conditionPerEventCopy = utils_1.deepClone(conditionsPerEvent);
                eventsPerPropertyValue[documentCommittedUrl][eventName] = conditionPerEventCopy[eventName];
            }
            else {
                // tslint:disable-next-line:no-any
                for (var _c = 0, _d = Object.keys(conditionsPerEvent[eventName][0].Conditions); _c < _d.length; _c++) {
                    var conditionName = _d[_c];
                    var propertyMatch = conditionsPerEvent[eventName][0].Conditions[conditionName][0];
                    if (conditionName === "aternityCSSSelector" || conditionName === "documentCommittedUrl") {
                        if (conditionName !== "documentCommittedUrl") {
                            eventsPerPropertyValue[documentCommittedUrl][eventName][0].Conditions[conditionName].push(propertyMatch);
                        }
                        eventConfig[eventName][0].Conditions[conditionName].push(propertyMatch);
                    }
                }
            }
        }
    }
    // creating new empty configuration
    var configurationData = utils_1.deepClone(ConfigurationData_1.STARTING_CONFIGURATION);
    // update new configuration data with data received from WAC
    utils_1.populate({
        ConsolidatedEventConfig: {
            documentCommittedUrl: eventsPerPropertyValue
        }, EventConfig: eventConfig,
        WorkTimeThresholds: [
            { WorkTime: 300, TimeFrame: 1000 },
            { WorkTime: 1500, TimeFrame: 10000 },
            { WorkTime: 3000, TimeFrame: 60000 }
        ]
    }, configurationData);
    return new Configuration_1.Configuration(configurationData);
}
exports.transform = transform;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var browserInfo_1 = __webpack_require__(8);
var WacEventReporter = /** @class */ (function () {
    function WacEventReporter(wacCommunication) {
        this.wacCommunication = wacCommunication;
    }
    WacEventReporter.prototype.reportToWac = function (pageMessage) {
        var rawData = pageMessage;
        // create basic structure
        var eventType = rawData.messageData.EventType.split(".").pop();
        // make tab and frame and tab ids as numbers
        var frameId = rawData.frameId != null ? rawData.frameId :
            parseInt(rawData.messageData.Data[0].frameId, 10);
        var tabId = rawData.tabId != null ? rawData.tabId :
            parseInt(rawData.messageData.Data[0].tabId, 10);
        // build message body
        var dataToSend = {
            messageType: "EventMatchReport",
            event: {
                documentCommittedUrl: rawData.messageData.Data[0].documentCommittedUrl,
                modifierKeys: rawData.messageData.Data[0].aternityModifierKeys,
                documentTitle: rawData.messageData.Data[0].documentTitle,
                eventType: eventType,
                frameId: frameId,
                tabId: tabId,
                timeStamp: rawData.timeStamp,
                browser: browserInfo_1.browserInfo.name,
            }
        };
        if (rawData.messageData.Data[0].aternityMouseButton != null) {
            dataToSend.event.mouseButton = rawData.messageData.Data[0].aternityMouseButton;
        }
        if (rawData.messageData.Data[0].key !== undefined) {
            dataToSend.event.key = rawData.messageData.Data[0].key;
        }
        // if there a frame
        if (frameId > 0) {
            dataToSend.event.frameCommittedUrl = rawData.messageData.Data[0].frameCommittedUrl;
        }
        var aternityCSSSelector = rawData.messageData.Data[0].aternityCSSSelector;
        if (typeof aternityCSSSelector === "string") {
            dataToSend.event.cssSelector = aternityCSSSelector;
        }
        // if (isEventMatchReport(dataToSend)) {
        // 	console.log(dataToSend);
        // }
        // send message to WAC
        this.wacCommunication.sendMessageToWac(dataToSend);
    };
    WacEventReporter.prototype.wacMode = function () {
        return this.wacCommunication.isActive();
    };
    return WacEventReporter;
}());
exports.WacEventReporter = WacEventReporter;


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,